%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 27 FMDOCUMENT
0 0 /Palatino-Roman FMFONTDEFINE
1 0 /Palatino-Bold FMFONTDEFINE
2 0 /Palatino-Italic FMFONTDEFINE
3 0 /Times-Roman FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /Times-BoldItalic FMFONTDEFINE
7 0 /Times-Italic FMFONTDEFINE
8 0 /Courier-Oblique FMFONTDEFINE
9 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "38" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(38) 90 38.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Oak Language Specification) 283.83 38.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Confidential) 495.67 38.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\251) 476.1 750.67 T
1 F
(firstperson) 484.08 750.67 T
0 F
(,) 524.07 750.67 T
2 F
(inc) 528.07 750.67 T
0 F
(.) 538 750.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0.09 (\337oating point, or) 126 714 S
0.09 (dering of values) 194.38 714 S
(,) 260.21 714 T
0.09 (24) 266.96 714 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(for) 126 701.5 T
0 F
(,) 138.01 701.5 T
0.09 (25) 144.76 701.5 S
(,) 153.94 701.5 T
0.09 (26) 158.44 701.5 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (G) 126 673.83 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 0 0 1 0 0 0 K
0.09 (garbage collection) 126 659.5 S
(,) 199.88 659.5 T
0.09 (28) 206.63 659.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(goto) 126 647 T
0 F
(,) 144.01 647 T
0.09 (25) 150.76 647 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (I) 126 619.33 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 0 0 1 0 0 0 K
0.09 (identi\336ers) 126 605 S
(,) 167.25 605 T
0.09 (6) 174 605 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(if) 126 592.5 T
0 F
(,) 132.5 592.5 T
0.09 (25) 139.25 592.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(implements) 126 580 T
0 F
(,) 174.99 580 T
0.09 (1) 181.74 580 S
0.09 (1) 185.83 580 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(import) 126 567.5 T
0 F
(,) 154 567.5 T
0.09 (20) 160.75 567.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(instanceof) 126 555 T
0 F
(,) 168.49 555 T
0.09 (24) 175.24 555 S
(,) 184.42 555 T
0.09 (28) 188.92 555 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(int) 126 542.5 T
0 F
(,) 137.49 542.5 T
0.09 (9) 144.24 542.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.09 (integers) 126 530 S
(,) 158.51 530 T
0.09 (7) 165.26 530 S
(,) 169.85 530 T
0.09 (8) 174.35 530 S
(,) 178.94 530 T
0.09 (22) 183.44 530 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(interface) 126 517.5 T
0 F
(,) 161.99 517.5 T
0.09 (18) 168.74 517.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.09 (interfaces) 126 505 S
(,) 165.18 505 T
0.09 (1) 171.93 505 S
0.09 (1) 176.02 505 S
(,) 180.61 505 T
0.09 (18) 185.11 505 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (L) 126 477.33 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 0 0 1 0 0 0 K
(length) 126 463 T
0 F
0.09 (\050array length\051) 154.75 463 S
(,) 210.71 463 T
0.09 (10) 217.46 463 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.09 (literals) 126 450.5 S
(,) 153.69 450.5 T
0.09 (7) 160.44 450.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(long) 126 438 T
0 F
(,) 144.5 438 T
0.09 (9) 151.25 438 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(long long) 126 425.5 T
0 F
(,) 165.26 425.5 T
0.09 (9) 172.01 425.5 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (M) 126 397.83 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 0 0 1 0 0 0 K
0.09 (methods) 126 383.5 S
(,) 161.29 383.5 T
0.09 (12) 168.04 383.5 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (N) 126 355.83 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 0 0 1 0 0 0 K
(new) 126 341.5 T
0 F
(,) 143.5 341.5 T
0.09 (24) 150.25 341.5 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (O) 126 313.83 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 0 0 1 0 0 0 K
0.09 (OR, logical) 126 299.5 S
(,) 170.85 299.5 T
0.09 (23) 177.6 299.5 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (P) 126 271.83 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 0 0 1 0 0 0 K
(package) 126 257.5 T
0 F
(,) 159.5 257.5 T
0.09 (20) 166.25 257.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.09 (packages) 126 245 S
(,) 163.26 245 T
0.09 (19) 170.01 245 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.09 (postconditions) 126 232.5 S
(,) 186.12 232.5 T
0.09 (21) 192.87 232.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.09 (pr) 126 220 S
0.09 (econditions) 134.98 220 S
(,) 182.07 220 T
0.09 (21) 188.82 220 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(print\050\051) 126 207.5 T
0 F
(,) 152.49 207.5 T
0.09 (24) 159.24 207.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(println\050\051) 126 195 T
0 F
(,) 160.98 195 T
0.09 (24) 167.73 195 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(private) 126 182.5 T
0 F
(,) 155 182.5 T
0.09 (15) 161.75 182.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(protect) 126 170 T
0 F
(,) 154.49 170 T
0.09 (28) 161.24 170 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(protected) 126 157.5 T
0 F
(,) 164.49 157.5 T
0.09 (15) 171.24 157.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(public) 126 145 T
0 F
(,) 152.49 145 T
0.09 (15) 159.24 145 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (R) 126 117.33 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 0 0 1 0 0 0 K
(return) 126 103 T
0 F
(,) 151.5 103 T
0.09 (26) 158.25 103 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (S) 342 711.33 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 0 0 1 0 0 0 K
(short) 342 697 T
0 F
(,) 363 697 T
0.09 (9) 369.75 697 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(static) 342 684.5 T
0 F
(,) 363.48 684.5 T
0.09 (13) 370.23 684.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.09 (String) 342 672 S
(,) 366.61 672 T
0.09 (8) 373.36 672 S
(,) 377.95 672 T
0.09 (24) 382.45 672 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.09 (strings) 342 659.5 S
(,) 369.61 659.5 T
0.09 (8) 376.36 659.5 S
(,) 380.95 659.5 T
0.09 (10) 385.45 659.5 S
(,) 394.63 659.5 T
0.09 (24) 399.13 659.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(super) 342 647 T
0 F
(,) 364.99 647 T
0.09 (17) 371.74 647 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(switch) 342 634.5 T
0 F
(,) 368.98 634.5 T
0.09 (25) 375.73 634.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(synchronize) 342 622 T
0 F
(,) 391.99 622 T
0.09 (16) 398.74 622 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(synchronized) 342 609.5 T
0 F
(,) 397.49 609.5 T
0.09 (15) 404.24 609.5 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (T) 342 581.83 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 0 0 1 0 0 0 K
(this) 342 567.5 T
0 F
(,) 357.49 567.5 T
0.09 (1) 364.24 567.5 S
0.09 (1) 368.33 567.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(throw) 342 555 T
0 F
(,) 366.5 555 T
0.09 (26) 373.25 555 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(transient) 342 542.5 T
0 F
(,) 378.49 542.5 T
0.09 (15) 385.24 542.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(try) 342 530 T
0 F
(,) 353.5 530 T
0.09 (26) 360.25 530 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (U) 342 502.33 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 0 0 1 0 0 0 K
0.09 (Unicode) 342 488 S
(,) 376.21 488 T
0.09 (6) 382.96 488 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.09 (characters) 360 477 S
(,) 401.3 477 T
0.09 (10) 408.05 477 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(unprotect) 342 464.5 T
0 F
(,) 381.49 464.5 T
0.09 (28) 388.24 464.5 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (V) 342 436.83 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 0 0 1 0 0 0 K
(void) 342 422.5 T
0 F
(,) 360.5 422.5 T
0.09 (12) 367.25 422.5 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(volatile) 342 410 T
0 F
(,) 373 410 T
0.09 (14) 379.75 410 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (W) 342 382.33 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 0 0 1 0 0 0 K
(while) 342 368 T
0 F
(,) 365.49 368 T
0.09 (26) 372.24 368 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (X) 342 340.33 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 0 0 1 0 0 0 K
0.09 (XOR, logical) 342 326 S
(,) 392.94 326 T
0.09 (23) 399.69 326 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 1
%%Page: "37" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(37) 532 30.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 653.25 540 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 -208 1000 792 C
2 30 Q
0 X
0 0 0 1 0 0 0 K
(Index) 90 633.25 T
126 72 324 576 R
7 X
V
1 1 0 0 0 0 1 K
1 13 Q
0 X
1 1 0 0 0 0 1 K
0.13 (Symbols) 126 567.33 S
0 0 0 1 0 0 0 K
0 9 Q
0 0 0 1 0 0 0 K
0.09 (!) 126 553 S
(,) 128.59 553 T
0.09 (23) 135.34 553 S
0.09 (\320) 126 540.5 S
(,) 130.59 540.5 T
0.09 (23) 137.34 540.5 S
0.09 (!=) 126 528 S
(,) 134.14 528 T
0.09 (23) 140.89 528 S
(,) 150.07 528 T
0.09 (24) 154.57 528 S
0.09 (%) 126 515.5 S
(,) 133.65 515.5 T
0.09 (23) 140.4 515.5 S
0.09 (&) 126 503 S
(,) 133.09 503 T
0.09 (23) 139.84 503 S
0.09 (&&) 126 490.5 S
(,) 140.18 490.5 T
0.09 (23) 146.93 490.5 S
0.09 (&=) 126 478 S
(,) 138.64 478 T
0.09 (23) 145.39 478 S
0.09 (*) 126 465.5 S
(,) 129.59 465.5 T
0.09 (23) 136.34 465.5 S
0.09 (*=) 126 453 S
(,) 135.13 453 T
0.09 (23) 141.88 453 S
0.09 (+) 126 440.5 S
(,) 131.54 440.5 T
0.09 (23) 138.29 440.5 S
(,) 147.47 440.5 T
0.09 (24) 151.97 440.5 S
0.09 (+=) 126 428 S
(,) 137.09 428 T
0.09 (23) 143.84 428 S
0.09 (-, unary) 126 415.5 S
(,) 157.94 415.5 T
0.09 (22) 164.69 415.5 S
0.09 (\320, unary) 126 403 S
(,) 159.44 403 T
0.09 (23) 166.19 403 S
0.09 (/) 126 390.5 S
(,) 131.54 390.5 T
0.09 (23) 138.29 390.5 S
1 F
(/**) 126 378 T
0 F
0.09 (...) 136.66 378 S
1 F
(*/) 143.68 378 T
0 F
(,) 150.34 378 T
0.09 (6) 157.09 378 S
1 F
(/*) 126 365.5 T
0 F
0.09 (...) 132.66 365.5 S
1 F
(*/) 139.68 365.5 T
0 F
(,) 146.34 365.5 T
0.09 (6) 153.09 365.5 S
1 F
(//) 126 353 T
0 F
(,) 131.33 353 T
0.09 (6) 138.08 353 S
0.09 (/=) 126 340.5 S
(,) 137.09 340.5 T
0.09 (23) 143.84 340.5 S
0.09 (<) 126 328 S
(,) 131.54 328 T
0.09 (23) 138.29 328 S
(,) 147.47 328 T
0.09 (24) 151.97 328 S
0.09 (<<) 126 315.5 S
(,) 137.09 315.5 T
0.09 (23) 143.84 315.5 S
0.09 (<=) 126 303 S
(,) 137.09 303 T
0.09 (23) 143.84 303 S
(,) 153.02 303 T
0.09 (24) 157.52 303 S
0.09 (\320=) 126 290.5 S
(,) 136.13 290.5 T
0.09 (23) 142.88 290.5 S
0.09 (==) 126 278 S
(,) 137.09 278 T
0.09 (23) 143.84 278 S
(,) 153.02 278 T
0.09 (24) 157.52 278 S
0.09 (>) 126 265.5 S
(,) 131.54 265.5 T
0.09 (23) 138.29 265.5 S
(,) 147.47 265.5 T
0.09 (24) 151.97 265.5 S
0.09 (>=) 126 253 S
(,) 137.09 253 T
0.09 (23) 143.84 253 S
(,) 153.02 253 T
0.09 (24) 157.52 253 S
0.09 (>>) 126 240.5 S
(,) 137.09 240.5 T
0.09 (23) 143.84 240.5 S
0.09 (>>>) 126 228 S
(,) 142.63 228 T
0.09 (23) 149.38 228 S
0.09 (^) 126 215.5 S
(,) 131.54 215.5 T
0.09 (23) 138.29 215.5 S
0.09 (^=) 126 203 S
(,) 137.09 203 T
0.09 (23) 143.84 203 S
0.09 (|) 126 190.5 S
(,) 131.54 190.5 T
0.09 (23) 138.29 190.5 S
0.09 (|=) 126 178 S
(,) 137.09 178 T
0.09 (23) 143.84 178 S
0.09 (||) 126 165.5 S
(,) 137.09 165.5 T
0.09 (23) 143.84 165.5 S
0.09 (~) 126 153 S
(,) 131.54 153 T
0.09 (22) 138.29 153 S
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (A) 126 125.33 S
0 0 0 1 0 0 0 K
0 9 Q
0 0 0 1 0 0 0 K
0.09 (assertions) 126 111 S
(,) 166.42 111 T
0.09 (21) 173.17 111 S
342 72 540 576 R
7 X
V
1 1 0 0 0 0 1 K
1 13 Q
0 X
1 1 0 0 0 0 1 K
0.13 (B) 342 567.33 S
0 0 0 1 0 0 0 K
1 9 Q
0 0 0 1 0 0 0 K
(boolean) 342 553 T
0 F
(,) 375 553 T
0.09 (8) 381.75 553 S
0.09 (boolean expr) 342 540.5 S
0.09 (essions) 394.56 540.5 S
(,) 423.72 540.5 T
0.09 (25) 430.47 540.5 S
1 F
(break) 342 528 T
0 F
(,) 365.5 528 T
0.09 (25) 372.25 528 S
1 F
(byte) 342 515.5 T
0 F
(,) 360 515.5 T
0.09 (9) 366.75 515.5 S
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (C) 342 487.83 S
0 0 0 1 0 0 0 K
1 9 Q
0 0 0 1 0 0 0 K
(case) 342 473.5 T
0 F
(,) 358.99 473.5 T
0.09 (25) 365.74 473.5 S
0.09 (casting) 342 461 S
(,) 370.74 461 T
0.09 (1) 377.49 461 S
0.09 (1) 381.58 461 S
(,) 386.17 461 T
0.09 (25) 390.67 461 S
1 F
(catch) 342 448.5 T
0 F
(,) 362.99 448.5 T
0.09 (26) 369.74 448.5 S
1 F
(char) 342 436 T
0 F
(,) 359.5 436 T
0.09 (9) 366.25 436 S
(,) 370.84 436 T
0.09 (10) 375.34 436 S
0.09 (classes) 342 423.5 S
(,) 369.5 423.5 T
0.09 (8) 376.25 423.5 S
(,) 380.84 423.5 T
0.09 (10) 385.34 423.5 S
(,) 394.52 423.5 T
0.09 (19) 399.02 423.5 S
(,) 408.2 423.5 T
0.09 (24) 412.7 423.5 S
1 F
(clone) 342 411 T
0 F
(,) 364 411 T
0.09 (24) 370.75 411 S
0.09 (comments) 342 398.5 S
(,) 383.82 398.5 T
0.09 (6) 390.57 398.5 S
1 F
(const) 342 386 T
0 F
(,) 363.49 386 T
0.09 (14) 370.24 386 S
0.09 (constants.) 342 373.5 S
2 F
0.09 (See) 384.88 373.5 S
0 F
0.09 (literals) 399.49 373.5 S
0.09 (constraints) 342 361 S
(,) 386.55 361 T
0.09 (21) 393.3 361 S
0.09 (constr) 342 348.5 S
0.09 (uctors) 366.92 348.5 S
(,) 392.1 348.5 T
0.09 (16) 398.85 348.5 S
1 F
(continue) 342 336 T
0 F
(,) 377.99 336 T
0.09 (26) 384.74 336 S
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (D) 342 308.33 S
0 0 0 1 0 0 0 K
0 9 Q
0 0 0 1 0 0 0 K
0.09 (declaration or) 342 294 S
0.09 (der) 398.5 294 S
(,) 412.14 294 T
0.09 (17) 418.89 294 S
1 F
(default) 342 281.5 T
0 F
(,) 371.49 281.5 T
0.09 (25) 378.24 281.5 S
1 F
(do) 342 269 T
0 F
(,) 352.5 269 T
0.09 (26) 359.25 269 S
1 F
(double) 342 256.5 T
0 F
(,) 371 256.5 T
0.09 (9) 377.75 256.5 S
0.09 (double pr) 342 244 S
0.09 (ecision) 381.61 244 S
(,) 409.75 244 T
0.09 (7) 416.5 244 S
(,) 421.09 244 T
0.09 (9) 425.59 244 S
(,) 430.18 244 T
0.09 (23) 434.68 244 S
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (E) 342 216.33 S
0 0 0 1 0 0 0 K
1 9 Q
0 0 0 1 0 0 0 K
(else) 342 202 T
0 F
(,) 357.99 202 T
0.09 (25) 364.74 202 S
0.09 (exceptions) 342 189.5 S
(,) 385.09 189.5 T
0.09 (26) 391.84 189.5 S
0.09 (cast) 360 178.5 S
(,) 375.61 178.5 T
0.09 (25) 382.36 178.5 S
0.09 (\337oating point) 360 167.5 S
(,) 415.21 167.5 T
0.09 (24) 421.96 167.5 S
1 F
(extends) 342 155 T
0 F
(,) 373.49 155 T
0.09 (1) 380.24 155 S
0.09 (1) 384.34 155 S
1 1 0 0 0 0 1 K
1 13 Q
1 1 0 0 0 0 1 K
0.13 (F) 342 127.33 S
0 0 0 1 0 0 0 K
1 9 Q
0 0 0 1 0 0 0 K
(\336nal) 342 113 T
0 F
(,) 360.49 113 T
0.09 (15) 367.24 113 S
1 F
(\336nally) 342 100.5 T
0 F
(,) 368.5 100.5 T
0.09 (27) 375.25 100.5 S
1 F
(\337oat) 342 88 T
0 F
(,) 360 88 T
0.09 (9) 366.75 88 S
0.09 (\337oating point) 342 75.5 S
(,) 397.21 75.5 T
0.09 (7) 403.96 75.5 S
(,) 408.55 75.5 T
0.09 (9) 413.05 75.5 S
(,) 417.64 75.5 T
0.09 (23) 422.14 75.5 S
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 2
%%Page: "36" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(36) 54 30.67 T
(Confidential) 477.67 30.67 T
0 10 Q
(performing a time-consuming job that the pr) 180 713.33 T
(ogram doesn\325t need to complete) 377.16 713.33 T
(befor) 180 701.33 T
(e going on. When a thr) 202.88 701.33 T
(ead has \336nished its job, the thr) 303.54 701.33 T
(ead is suspended or) 438.2 701.33 T
(destr) 180 689.33 T
(oyed. See also) 202.17 689.33 T
2 F
(pr) 266.53 689.33 T
(ocess) 275.24 689.33 T
0 F
(.) 295.42 689.33 T
1 F
(Unicode) 180 665.33 T
0 F
(A 16-bit character set de\336ned by ISO 10646.) 180 653.33 T
1 F
(variable) 180 629.33 T
0 F
(An item of data named by an identi\336er) 180 617.33 T
(. Each variable has a type, such as) 351.36 617.33 T
1 F
(int) 502.92 617.33 T
0 F
( or) 515.69 617.33 T
(Object, and a scope. See also) 180 605.33 T
2 F
(class variable) 307.53 605.33 T
0 F
(,) 360.95 605.33 T
2 F
(instance variable) 365.95 605.33 T
0 F
(,) 433.82 605.33 T
2 F
(local variable) 438.82 605.33 T
0 F
(.) 491.68 605.33 T
FMENDPAGE
%%EndPage: "36" 3
%%Page: "35" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(35) 514 30.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
1 10 Q
(octal) 180 713.33 T
0 F
(The numbering system using 8 as its base, using the numerals 0-7 as its digits. In) 180 701.33 T
(Oak pr) 180 689.33 T
(ograms, octal numbers must be pr) 210.7 689.33 T
(eceded with) 361.46 689.33 T
1 F
(0) 417.82 689.33 T
0 F
(. See also) 422.82 689.33 T
2 F
(hexadecimal) 465.26 689.33 T
0 F
(.) 514.33 689.33 T
1 F
(overloading) 180 665.33 T
0 F
(Using one identi\336er to r) 180 653.33 T
(efer to multiple items in the same) 285.46 653.33 T
(scope. In the Oak) 435.68 653.33 T
(language, you can overload methods but not variables or operators.) 180 641.33 T
1 F
(overriding) 180 617.33 T
0 F
(Pr) 180 605.33 T
(oviding a dif) 189.81 605.33 T
(fer) 246.4 605.33 T
(ent implementation of a method in a subclass of the class that) 258.29 605.33 T
(originally de\336ned the method.) 180 593.33 T
1 F
(package) 180 569.33 T
0 F
(In the Oak language, a gr) 180 557.33 T
(oup of classes. Packages ar) 291.48 557.33 T
(e declar) 409.53 557.33 T
(ed with the) 443.84 557.33 T
1 F
(package) 496.44 557.33 T
0 F
(keywor) 180 545.33 T
(d.) 213.48 545.33 T
1 F
(pixel) 180 521.33 T
0 F
(The smallest addr) 180 509.33 T
(essable pictur) 258.91 509.33 T
(e element on a display scr) 319.33 509.33 T
(een or printed page.) 433.28 509.33 T
1 F
(pointer) 180 485.33 T
0 F
(A data element whose value is an addr) 180 473.33 T
(ess.) 351.83 473.33 T
1 F
(process) 180 449.33 T
0 F
(A virtual addr) 180 437.33 T
(ess space containing one or mor) 243.48 437.33 T
(e thr) 384.27 437.33 T
(eads.) 404.41 437.33 T
1 F
(root) 180 413.33 T
0 F
(In a hierar) 180 401.33 T
(chy of items, the one item fr) 225.43 401.33 T
(om which all other items ar) 348.4 401.33 T
(e descended.) 469.42 401.33 T
(The r) 180 389.33 T
(oot item has nothing above it in the hierar) 203.01 389.33 T
(chy) 388.13 389.33 T
(. See also) 402.84 389.33 T
2 F
(hierar) 445.28 389.33 T
(chy) 468.99 389.33 T
0 F
(,) 481.95 389.33 T
2 F
(class) 486.95 389.33 T
0 F
(,) 506.02 389.33 T
2 F
(package) 180 377.33 T
0 F
(.) 211.28 377.33 T
1 F
(scope) 180 353.33 T
0 F
(A characteristic of an identi\336er that determines wher) 180 341.33 T
(e the identi\336er can be used.) 413.44 341.33 T
-0.2 (Most identi\336ers in the Oak language have either class or local scope.) 180 329.33 P
-0.2 (Instance and) 481.73 329.33 P
(class variables and methods have class scope; they can be used outside the class) 180 317.33 T
-0.24 (and its subclasses only by pr) 180 305.33 P
-0.24 (e\336xing them with an instance of the class or \050for class) 304.92 305.33 P
(variables and methods\051 with the class name. All other variables ar) 180 293.33 T
(e declar) 471.35 293.33 T
(ed) 505.66 293.33 T
(within methods and have local scope; they can be used only within the enclosing) 180 281.33 T
(block.) 180 269.33 T
1 F
(single precision) 180 245.33 T
0 F
(In the Oak language speci\336cation, describes a \337oating point number with 32 bits) 180 233.33 T
(of data. See also) 180 221.33 T
2 F
(double pr) 253.1 221.33 T
(ecision) 290.61 221.33 T
0 F
(.) 318.02 221.33 T
1 F
(subclass) 180 197.33 T
0 F
-0.22 (A class that is derived fr) 180 185.33 P
-0.22 (om a particular class, per) 285.92 185.33 P
-0.22 (haps with one or mor) 395.7 185.33 P
-0.22 (e classes in) 489.77 185.33 P
(between. See also) 180 173.33 T
2 F
(super) 259.76 173.33 T
(class) 281.81 173.33 T
0 F
(.) 300.88 173.33 T
1 F
(superclass) 180 149.33 T
0 F
-0.15 (A class fr) 180 137.33 P
-0.15 (om which a particular class is derived, per) 220.41 137.33 P
-0.15 (haps with one or mor) 406.31 137.33 P
-0.15 (e classes) 500.65 137.33 P
(in between. See also) 180 125.33 T
2 F
(subclass) 270.99 125.33 T
0 F
(.) 304.14 125.33 T
1 F
(thread) 180 101.33 T
0 F
(The basic unit of pr) 180 89.33 T
(ogram execution. A pr) 265.45 89.33 T
(ocess can have several thr) 364.47 89.33 T
(eads r) 478.34 89.33 T
(unning) 504.85 89.33 T
(concurr) 180 77.33 T
(ently) 213.91 77.33 T
(, each performing a dif) 235.14 77.33 T
(fer) 335.47 77.33 T
(ent job, such as waiting for events or) 347.36 77.33 T
FMENDPAGE
%%EndPage: "35" 4
%%Page: "34" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(34) 54 30.67 T
(Confidential) 477.67 30.67 T
1 10 Q
(instance method) 180 713.33 T
0 F
(Any method that can be invoked using an instance of a class, but not using the) 180 701.33 T
(class name. Instance methods ar) 180 689.33 T
(e de\336ned in class de\336nitions. See also) 321.79 689.33 T
2 F
(class) 489.62 689.33 T
(method) 180 677.33 T
0 F
(.) 209.44 677.33 T
1 F
(instance variable) 180 653.33 T
0 F
-0.25 (Any item of data that\325s associated with a particular object. Each instance of a class) 180 641.33 P
(has its own copy of the instance variables de\336ned in the class. See also) 180 629.33 T
2 F
(class) 492.52 629.33 T
(variable) 180 617.33 T
0 F
(.) 211.85 617.33 T
1 F
(interface) 180 593.33 T
0 F
(In the Oak language, a gr) 180 581.33 T
(oup of methods that can be implemented by several) 291.48 581.33 T
(classes, r) 180 569.33 T
(egar) 218.63 569.33 T
(dless of wher) 237.75 569.33 T
(e the classes ar) 296.55 569.33 T
(e in the class hierar) 361.34 569.33 T
(chy) 445.8 569.33 T
(.) 460.51 569.33 T
1 F
(interpreter) 180 545.33 T
0 F
-0.07 (A module that alternately decodes and executes every statement in some body of) 180 533.33 P
(code. The Oak interpr) 180 521.33 T
(eter decodes and executes Oak bytecode. See also) 276.47 521.33 T
2 F
(compiler) 496.93 521.33 T
(,) 530.82 521.33 T
(runtime system) 180 509.33 T
0 F
(.) 243.07 509.33 T
1 F
(lexical) 180 485.33 T
0 F
-0.15 (Pertaining to how the characters in sour) 180 473.33 P
-0.15 (ce code ar) 355.48 473.33 P
-0.15 (e translated into tokens that the) 398.98 473.33 P
(compiler can understand.) 180 461.33 T
1 F
(linker) 180 437.33 T
0 F
-0.22 (A module that builds an executable, complete pr) 180 425.33 P
-0.22 (ogram fr) 393.2 425.33 P
-0.22 (om component machine) 431.38 425.33 P
-0.14 (code modules. The Oak linker cr) 180 413.33 P
-0.14 (eates a r) 322.8 413.33 P
-0.14 (unnable pr) 358.48 413.33 P
-0.14 (ogram fr) 406.53 413.33 P
-0.14 (om compiled classes.) 444.8 413.33 P
(See also) 180 401.33 T
2 F
(compiler) 217.44 401.33 T
0 F
(,) 251.33 401.33 T
2 F
(interpr) 256.33 401.33 T
(eter) 284.49 401.33 T
0 F
(,) 298.75 401.33 T
2 F
(runtime system) 303.75 401.33 T
0 F
(.) 366.82 401.33 T
1 F
(literal) 180 377.33 T
0 F
(The basic r) 180 365.33 T
(epr) 227.63 365.33 T
(esentation of any integer) 242.2 365.33 T
(, \337oating point, or character value. For) 350.56 365.33 T
-0.28 (example,) 180 353.33 P
1 F
-0.28 (3.0) 222.21 353.33 P
0 F
-0.28 ( is a single-pr) 234.71 353.33 P
-0.28 (ecision \337oating point literal, and) 292.88 353.33 P
1 F
-0.28 (\324a\325) 437.29 353.33 P
0 F
-0.28 (is a character literal.) 450.07 353.33 P
1 F
(local variable) 180 329.33 T
0 F
-0.02 (A data item known within a block, but inaccessible to code outside the block. For) 180 317.33 P
-0.01 (example, any variable de\336ned within an Oak method is a local variable and can\325t) 180 305.33 P
(be used outside the method.) 180 293.33 T
1 F
(method) 180 269.33 T
0 F
(A function de\336ned in a class. See also) 180 257.33 T
2 F
(instance method) 348.02 257.33 T
0 F
(,) 413.48 257.33 T
2 F
(class method) 418.48 257.33 T
0 F
(.) 469.49 257.33 T
1 F
(multithreaded) 180 233.33 T
0 F
(Describes a pr) 180 221.33 T
(ogram that is designed to have parts of its code execute) 242.41 221.33 T
(concurr) 180 209.33 T
(ently) 213.91 209.33 T
(. See also) 235.14 209.33 T
2 F
(thr) 277.58 209.33 T
(ead) 289.62 209.33 T
0 F
(.) 302.95 209.33 T
1 F
(object) 180 185.33 T
0 F
(The principle building blocks of object-oriented pr) 180 173.33 T
(ograms. Each object is a) 402.22 173.33 T
(pr) 180 161.33 T
(ogramming unit consisting of data \050instance variables\051 and functionality) 189.78 161.33 T
(\050instance methods\051. See also) 180 149.33 T
2 F
(class) 306.39 149.33 T
0 F
(.) 325.46 149.33 T
1 F
(object oriented design) 180 125.33 T
0 F
(A softwar) 180 113.33 T
(e design method that models the characteristics of abstract or r) 223.68 113.33 T
(eal) 500.02 113.33 T
(objects using classes and objects.) 180 101.33 T
FMENDPAGE
%%EndPage: "34" 5
%%Page: "33" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(33) 514 30.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
1 10 Q
(double precision) 180 713.33 T
0 F
-0.22 (In the Oak language speci\336cation, describes a \337oating point number that holds 64) 180 701.33 P
(bits of data. See also) 180 689.33 T
2 F
(single pr) 271.54 689.33 T
(ecision) 306.65 689.33 T
0 F
(.) 334.06 689.33 T
1 F
(encapsulation) 180 665.33 T
0 F
-0.12 (The localization of knowledge within a module. Because objects encapsulate data) 180 653.33 P
(and implementation, the user of an object can view the object as a black box that) 180 641.33 T
(pr) 180 629.33 T
(ovides services. Instance variables and methods can be added, deleted, or) 189.78 629.33 T
-0.15 (changed, but as long as the services pr) 180 617.33 P
-0.15 (ovided by the object r) 348.22 617.33 P
-0.15 (emain the same, code) 443.21 617.33 P
(that uses the object can continue to use it without being r) 180 605.33 T
(ewritten.) 431.03 605.33 T
1 F
(exception) 180 581.33 T
0 F
(An event during pr) 180 569.33 T
(ogram execution that pr) 265.57 569.33 T
(events the pr) 371.65 569.33 T
(ogram fr) 428.85 569.33 T
(om continuing) 467.25 569.33 T
-0.03 (normally; generally) 180 557.33 P
-0.03 (, an err) 265.59 557.33 P
-0.03 (or) 296.35 557.33 P
-0.03 (. The Oak language supports exceptions with the) 305.02 557.33 P
1 F
-0.03 (try) 523.36 557.33 P
0 F
-0.03 (,) 535.03 557.33 P
1 F
(catch) 180 545.33 T
0 F
(, and) 203.32 545.33 T
1 F
(throw) 227.75 545.33 T
0 F
( keywor) 254.97 545.33 T
(ds.) 290.95 545.33 T
(See also) 306.3 545.33 T
2 F
(exception handler) 343.74 545.33 T
0 F
(.) 414.02 545.33 T
1 F
(exception handler) 180 521.33 T
0 F
-0.18 (A block of code that r) 180 509.33 P
-0.18 (eacts to a speci\336c type of exception. If the exception is for an) 274 509.33 P
(err) 180 497.33 T
(or that the pr) 192.51 497.33 T
(ogram can r) 250.41 497.33 T
(ecover fr) 303.24 497.33 T
(om, the pr) 341.92 497.33 T
(ogram can r) 387.36 497.33 T
(esume executing after) 440.19 497.33 T
(the exception handler has executed.) 180 485.33 T
(See also) 340.34 485.33 T
2 F
(exception) 377.78 485.33 T
0 F
(.) 415.74 485.33 T
1 F
(formal parameter list) 180 461.33 T
0 F
(The parameters speci\336ed in the de\336nition of a particular method. See also) 180 449.33 T
2 F
(actual) 508.09 449.33 T
(parameter list) 180 437.33 T
0 F
(.) 235.83 437.33 T
1 F
(garbage collection) 180 413.33 T
0 F
(The automatic detection and fr) 180 401.33 T
(eeing of memory that is no longer in use. The Oak) 315.8 401.33 T
-0.31 (r) 180 389.33 P
-0.31 (untime system performs garbage collection so that pr) 183.87 389.33 P
-0.31 (ogrammers never explicitly) 416.95 389.33 P
(fr) 180 377.33 T
(ee objects and other data.) 187.1 377.33 T
1 F
(hexadecimal) 180 353.33 T
0 F
(The numbering system that uses 16 as its base. The marks 0-9 and a-f \050or) 180 341.33 T
(equivalently A-F\051 r) 180 329.33 T
(epr) 264 329.33 T
(esent the digits 0 thr) 278.57 329.33 T
(ough 15. In Oak pr) 368.18 329.33 T
(ograms,) 450.94 329.33 T
(hexadecimal numbers must be pr) 180 317.33 T
(eceded with) 327.41 317.33 T
1 F
(0x) 383.77 317.33 T
0 F
(. See also) 393.77 317.33 T
2 F
(octal) 436.21 317.33 T
0 F
(.) 455.27 317.33 T
1 F
(hierarchy) 180 293.33 T
0 F
(A classi\336cation of r) 180 281.33 T
(elationships in which each item except the top one \050known as) 264.52 281.33 T
-0.25 (the) 180 269.33 P
2 F
-0.25 (r) 196.12 269.33 P
-0.25 (oot) 199.83 269.33 P
0 F
-0.25 (\051 is a specialized form of the item above it. Each item can have one or mor) 212.04 269.33 P
-0.25 (e) 532.96 269.33 P
(items below it in the hierar) 180 257.33 T
(chy) 298.57 257.33 T
(. In the Oak class hierar) 313.28 257.33 T
(chy) 416.83 257.33 T
(, the r) 431.54 257.33 T
(oot is the Object) 456.68 257.33 T
(class.) 180 245.33 T
1 F
(identi\336er) 180 221.33 T
0 F
(The name of an item in an Oak pr) 180 209.33 T
(ogram.) 328.33 209.33 T
1 F
(inheritance) 180 185.33 T
0 F
(The concept of classes automatically containing the variables and methods) 180 173.33 T
(de\336ned in their super) 180 161.33 T
(classes.) 275.47 161.33 T
1 F
(instance) 180 137.33 T
0 F
(An object of a particular class. In Oak pr) 180 125.33 T
(ograms, an instance of a class is cr) 357.39 125.33 T
(eated) 507.51 125.33 T
(using the) 180 113.33 T
1 F
(new) 223.43 113.33 T
0 F
( operator followed by the class name.) 242.87 113.33 T
FMENDPAGE
%%EndPage: "33" 6
%%Page: "32" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(32) 54 30.67 T
(Confidential) 477.67 30.67 T
1 10 Q
(class) 180 713.33 T
0 F
(In the Oak language, a type that de\336nes the implementation of a particular kind) 180 701.33 T
(of object. A class de\336nition de\336nes instance and class variables and methods, as) 180 689.33 T
(well as specifying the interfaces the class implements and the immediate) 180 677.33 T
(super) 180 665.33 T
(class of the class.) 204.84 665.33 T
1 F
(class method) 180 641.33 T
0 F
(Any method that can be invoked using the name of a particular class. Class) 180 629.33 T
(methods af) 180 617.33 T
(fect the class as a whole, not a particular instance of the class. Class) 229.16 617.33 T
(methods ar) 180 605.33 T
(e de\336ned in class de\336nitions. See also) 229.78 605.33 T
2 F
(instance method) 397.61 605.33 T
0 F
(.) 463.07 605.33 T
1 F
(class variable) 180 581.33 T
0 F
(A data item associated with a particular class as a whole\321not with particular) 180 569.33 T
(instances of the class. Class variables ar) 180 557.33 T
(e de\336ned in class de\336nitions. See also) 353.74 557.33 T
2 F
(instance variable) 180 545.33 T
0 F
(.) 247.87 545.33 T
1 F
(comment) 180 521.33 T
0 F
(In a pr) 180 509.33 T
(ogram, explanatory text that is ignor) 208.97 509.33 T
(ed by the compiler) 370.17 509.33 T
(. In Oak pr) 452.09 509.33 T
(ograms,) 499.48 509.33 T
(comments ar) 180 497.33 T
(e delimited using) 236.94 497.33 T
1 F
(//) 316.41 497.33 T
0 F
( or) 322.33 497.33 T
1 F
(/*) 336.74 497.33 T
0 F
(...) 344.14 497.33 T
1 F
(*/) 351.64 497.33 T
0 F
(.) 359.04 497.33 T
1 F
(compilation unit) 180 473.33 T
0 F
(The smallest unit of Oak code that can be compiled. In the curr) 180 461.33 T
(ent Oak) 457.08 461.33 T
(implementation, the compilation unit is a \336le.) 180 449.33 T
1 F
(compiler) 180 425.33 T
0 F
(A pr) 180 413.33 T
(ogram to translate sour) 200.06 413.33 T
(ce code into code to be executed by a computer) 302.81 413.33 T
(. The) 510.12 413.33 T
(Oak compiler translates Oak sour) 180 401.33 T
(ce code into Oak bytecode. See also) 328.11 401.33 T
2 F
(interpr) 486.39 401.33 T
(eter) 514.55 401.33 T
0 F
(.) 528.81 401.33 T
1 F
(constructor) 180 377.33 T
0 F
(A method that cr) 180 365.33 T
(eates an object. In the Oak language, constr) 255.1 365.33 T
(uctors ar) 445.56 365.33 T
(e instance) 484.21 365.33 T
(methods with the same name as their class. Oak constr) 180 353.33 T
(uctors ar) 421.32 353.33 T
(e invoked using) 459.97 353.33 T
(the) 180 341.33 T
1 F
(new) 196.37 341.33 T
0 F
( keywor) 215.81 341.33 T
(d.) 251.79 341.33 T
1 F
(critical section) 180 317.33 T
0 F
(A segment of code in which a thr) 180 305.33 T
(ead uses r) 326.07 305.33 T
(esour) 370.04 305.33 T
(ces \050such as certain instance) 394.33 305.33 T
-0.14 (variables\051 that can be used by other thr) 180 293.33 P
-0.14 (eads, but that must not be used by them at) 351.15 293.33 P
(the same time.) 180 281.33 T
1 F
(declaration) 180 257.33 T
0 F
-0.36 (A statement that establishes an identi\336er and associates attributes with it, without) 180 245.33 P
(necessarily r) 180 233.33 T
(eserving its storage \050for data\051 or pr) 234.92 233.33 T
(oviding the implementation \050for) 388.26 233.33 T
(methods\051. See also) 180 221.33 T
2 F
(de\336nition) 264.28 221.33 T
0 F
(.) 302.9 221.33 T
1 F
(de\336nition) 180 197.33 T
0 F
(A declaration that r) 180 185.33 T
(eserves storage \050for data\051 or pr) 266.04 185.33 T
(ovides implementation \050for) 401.21 185.33 T
(methods\051.) 180 173.33 T
1 F
(derived from) 180 149.33 T
0 F
(Describes a class that inherits pr) 180 137.33 T
(operties of another class. See also) 321.78 137.33 T
2 F
(subclass) 470.85 137.33 T
0 F
(,) 504 137.33 T
2 F
(super) 180 125.33 T
(class) 202.05 125.33 T
0 F
(.) 221.12 125.33 T
1 F
(distributed) 180 101.33 T
0 F
(Running in mor) 180 89.33 T
(e than one addr) 250.43 89.33 T
(ess space.) 319.68 89.33 T
FMENDPAGE
%%EndPage: "32" 7
%%Page: "31" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(31) 514 30.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
2 30 Q
(Glossary) 144 700 T
1 10 Q
(abstract class) 180 668.33 T
0 F
(A class that should never be instantiated; only its subclasses should be) 180 656.33 T
(instantiated. Abstract classes ar) 180 644.33 T
(e de\336ned so that other classes can inherit fr) 318.47 644.33 T
(om) 508.93 644.33 T
(them.) 180 632.33 T
1 F
(actual parameter list) 180 608.33 T
0 F
(The ar) 180 596.33 T
(guments speci\336ed in a particular method call. See also) 208.01 596.33 T
2 F
(formal parameter list) 450.04 596.33 T
0 F
(.) 534.48 596.33 T
1 F
(argument) 180 572.33 T
0 F
(A data item speci\336ed in a method call. An ar) 180 560.33 T
(gument can be a literal value, a) 376.91 560.33 T
(variable, or an expr) 180 548.33 T
(ession.) 265.7 548.33 T
1 F
(array) 180 524.33 T
0 F
(A collection of data items, all of the same type, in which each item\325s position is) 180 512.33 T
(uniquely designated by an integer) 180 500.33 T
(.) 330.49 500.33 T
1 F
(ASCII) 180 476.33 T
0 F
(American Standar) 180 464.33 T
(d Code for Information Inter) 260.23 464.33 T
(change. A standar) 386.75 464.33 T
(d assignment of) 466.66 464.33 T
(7-bit numeric codes to characters. See also) 180 452.33 T
2 F
(Unicode) 367.89 452.33 T
0 F
(.) 401.41 452.33 T
1 F
(atomic) 180 428.33 T
0 F
(Refers to an operation that is never interr) 180 416.33 T
(upted or left in an incomplete state) 361.57 416.33 T
(under any cir) 180 404.33 T
(cumstance.) 239.2 404.33 T
1 F
(binary operator) 180 380.33 T
0 F
(An operator that has two ar) 180 368.33 T
(guments.) 302.21 368.33 T
1 F
(bit) 180 344.33 T
0 F
(The smallest unit of information in a computer) 180 332.33 T
(, with a value of either 0 or 1.) 385.74 332.33 T
1 F
(bitwise operator) 180 308.33 T
0 F
-0.18 (An operator that manipulates bit-oriented data, such as by performing the logical) 180 296.33 P
(AND operation such that each bit that\325s 1 in either operand is 1 in the r) 180 284.33 T
(esult.) 492.88 284.33 T
1 F
(block) 180 260.33 T
0 F
(In the Oak language, any code between matching braces \050) 180 248.33 T
1 F
({) 434.57 248.33 T
0 F
( and) 437.67 248.33 T
1 F
(}) 459.6 248.33 T
0 F
(\051.) 462.7 248.33 T
1 F
(boolean) 180 224.33 T
0 F
(Refers to an expr) 180 212.33 T
(ession or variable that can have only a tr) 254.55 212.33 T
(ue or false value. The) 432.9 212.33 T
(Oak language pr) 180 200.33 T
(ovides the) 253.87 200.33 T
1 F
(boolean) 301.9 200.33 T
0 F
( type and the literal values) 338.57 200.33 T
1 F
(true) 458.34 200.33 T
0 F
( and) 476.67 200.33 T
1 F
(false) 498.6 200.33 T
0 F
(.) 520.26 200.33 T
1 F
(byte) 180 176.33 T
0 F
(A sequence of eight bits. The Oak language pr) 180 164.33 T
(ovides a corr) 383.46 164.33 T
(esponding) 440.24 164.33 T
1 F
(byte) 489.46 164.33 T
0 F
( type.) 509.46 164.33 T
1 F
(bytecode) 180 140.33 T
0 F
(Machine-independent code generated by the Oak compiler and executed by the) 180 128.33 T
(Oak interpr) 180 116.33 T
(eter) 231.43 116.33 T
(.) 247.48 116.33 T
1 F
(casting) 180 92.33 T
0 F
(Explicit conversion fr) 180 80.33 T
(om one data type to another) 274.35 80.33 T
(.) 398.28 80.33 T
FMENDPAGE
%%EndPage: "31" 8
%%Page: "30" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(A Appendix: Floating Point) 247.7 750.67 T
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(30) 54 30.67 T
(Confidential) 477.67 30.67 T
3 10 Q
( A.3) 144 713.33 T
4 F
(Ordering) 180 713.33 T
0 F
(The usual r) 180 691.33 T
(elational operators can be applied to \337oating-point values. W) 229.72 691.33 T
(ith the) 499.39 691.33 T
(exception of) 180 679.33 T
5 F
-0.5 (NaN) 236.43 679.33 S
0 F
(, all \337oating values ar) 252.93 679.33 T
(e or) 347.73 679.33 T
(der) 364.25 679.33 T
(ed, with -) 378.92 679.33 T
5 F
-0.5 (Inf) 420.98 679.33 S
-0.5 (<) 439.98 679.33 S
0 F
( all \336nite values) 445.48 679.33 T
5 F
-0.5 (<) 517.75 679.33 S
-0.5 (Inf) 180 667.33 S
0 F
(.) 196.5 667.33 T
5 F
-0.62 -0.5 (-Inf == -Inf, +Inf == +Inf, -0. == 0) 180 643.33 B
0 F
-0.28 (. The or) 373.06 643.33 P
-0.28 (dering r) 405.97 643.33 P
-0.28 (elations ar) 441.1 643.33 P
-0.28 (e transitive.) 486.48 643.33 P
(Equality and inequality ar) 180 631.33 T
(e r) 295.37 631.33 T
(e\337exive.) 306.43 631.33 T
5 F
-0.5 (NaN) 180 607.33 S
0 F
( is unor) 196.5 607.33 T
(der) 229.73 607.33 T
(ed. Thus the r) 244.4 607.33 T
(esult of any or) 305.16 607.33 T
(der r) 368.29 607.33 T
(elation between NaN and any) 389.41 607.33 T
(other value is false and pr) 180 595.33 T
(oduces 0. The one exception is that \322) 294.29 595.33 T
5 F
-0.5 (NaN !=) 455.3 595.33 S
0 F
( anything\323) 488.3 595.33 T
(is tr) 180 583.33 T
(ue.) 196.78 583.33 T
-0.24 (Note that, because NaN is unor) 180 559.33 P
-0.24 (der) 317.62 559.33 P
-0.24 (ed, Oak\325s logical inversion operator) 332.29 559.33 P
-0.24 (, !, does not) 488.05 559.33 P
(distribute over \337oating point r) 180 547.33 T
(elationals as it can over integers.) 314.16 547.33 T
3 F
( A.4) 144 511.33 T
4 F
(Summary of IEEE-754 Differ) 180 511.33 T
(ences) 305.64 511.33 T
0 F
-0.2 (Oak arithmetic is a subset of the IEEE-754 standar) 180 489.33 P
-0.2 (d. Her) 398.14 489.33 P
-0.2 (e is a summary of the key) 425.93 489.33 P
(dif) 180 477.33 T
(fer) 192.17 477.33 T
(ences.) 204.06 477.33 T
(\245) 189 459.33 T
(Nonstop Arithmetic\321The Oak system will not thr) 207 459.33 T
(ow exceptions, traps, or) 429.05 459.33 T
(otherwise signal the IEEE exceptional conditions: invalid operation,) 207 447.33 T
(division by zer) 207 435.33 T
(o, over\337ow) 272.66 435.33 T
(, under\337ow) 321.93 435.33 T
(, or inexact. Oak has no signaling) 372.59 435.33 T
(NaN.) 207 423.33 T
(\245) 189 408.33 T
(Rounding\321Oak r) 207 408.33 T
(ounds inexact r) 286.08 408.33 T
(esults to the near) 353.89 408.33 T
(est r) 428.83 408.33 T
(epr) 447.39 408.33 T
(esentable value,) 461.96 408.33 T
(with ties going to the value with a 0 least-signi\336cant bit. This is the IEEE) 207 396.33 T
(default mode. But, Oak r) 207 384.33 T
(ounds towar) 316.21 384.33 T
(ds zer) 372.2 384.33 T
(o when converting a \337oating) 398.61 384.33 T
(value to an integer) 207 372.33 T
(. Oak does not pr) 288.76 372.33 T
(ovide the user) 364.6 372.33 T
(-selectable r) 427.22 372.33 T
(ounding) 479.48 372.33 T
(modes for \337oating-point computations: up, down, or towar) 207 360.33 T
(ds zer) 468.78 360.33 T
(o.) 495.19 360.33 T
(\245) 189 345.33 T
(Relational set\321Oak has no r) 207 345.33 T
(elational pr) 332.56 345.33 T
(edicates which include the) 382.9 345.33 T
(unor) 207 333.33 T
(der) 228.08 333.33 T
(ed condition, except for !=. However) 242.75 333.33 T
(, all cases but one can be) 403.93 333.33 T
(constr) 207 321.33 T
(ucted by the pr) 234.09 321.33 T
(ogrammer) 300.96 321.33 T
(, using the existing r) 346.59 321.33 T
(elations and logical) 435.94 321.33 T
(inversion. The exception case is or) 207 309.33 T
(der) 357.78 309.33 T
(ed but unequal. Ther) 372.45 309.33 T
(e is no speci\336c) 464.86 309.33 T
(IEEE r) 207 297.33 T
(equir) 234.97 297.33 T
(ement her) 258.07 297.33 T
(e.) 302.44 297.33 T
(\245) 189 282.33 T
(Extended formats\321Oak does not support any extended formats, except) 207 282.33 T
-0.12 (that double will serve as single-extended. Other extended formats ar) 207 270.33 P
-0.12 (e not a) 508.54 270.33 P
(r) 207 258.33 T
(equir) 210.77 258.33 T
(ement of the standar) 233.87 258.33 T
(d.) 324.72 258.33 T
FMENDPAGE
%%EndPage: "30" 9
%%Page: "29" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(29) 514 30.67 T
(A Appendix: Floating Point) 247.7 750.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
3 14 Q
(A) 144 710.67 T
6 F
(Appendix: Floating Point) 180 710.67 T
0 10 Q
(This appendix discusses pr) 180 685.33 T
(operties of Oak \337oating point arithmetic: general) 299.43 685.33 T
-0.37 (pr) 180 673.33 P
-0.37 (ecision notes and special values, binary format conversion, or) 189.78 673.33 P
-0.37 (dering. At the end) 458.2 673.33 P
-0.39 (is a section summarizing the dif) 180 661.33 P
-0.39 (fer) 318.74 661.33 P
-0.39 (ences between Oak arithmetic and the IEEE 754) 330.63 661.33 P
-0.16 (standar) 180 649.33 P
-0.16 (d. For mor) 213.2 649.33 P
-0.16 (e information on the IEEE 754 standar) 259.51 649.33 P
-0.16 (d, see \322IEEE Standar) 426.12 649.33 P
-0.16 (d for) 516.48 649.33 P
(Binary Floating-Point Arithmetic, ANSI/IEEE Std. 754-1985.\323) 180 637.33 T
(Operations involving only single-pr) 180 613.33 T
(ecision) 338.58 613.33 T
1 F
(float) 371.65 613.33 T
0 F
( and integer values ar) 392.76 613.33 T
(e) 488.16 613.33 T
(performed using at least single-pr) 180 601.33 T
(ecision arithmetic and pr) 329.58 601.33 T
(oduce a single-) 439.53 601.33 T
-0.2 (pr) 180 589.33 P
-0.2 (ecision r) 189.78 589.33 P
-0.2 (esult. Other operations ar) 226.42 589.33 P
-0.2 (e performed in double pr) 338.41 589.33 P
-0.2 (ecision and pr) 448.98 589.33 P
-0.2 (oduce) 510.87 589.33 P
(a double pr) 180 577.33 T
(ecision r) 230.61 577.33 T
(esult. Oak \337oating-point arithmetic pr) 267.45 577.33 T
(oduces no exceptions.) 435.43 577.33 T
(Under\337ow is gradual.) 180 553.33 T
3 F
( A.1) 144 517.33 T
4 F
(Special V) 180 517.33 T
(alues) 219.36 517.33 T
0 F
(Ther) 180 495.33 T
(e is both a positive zer) 200.51 495.33 T
(o and a negative zer) 298.81 495.33 T
(o. The latter can be pr) 387.54 495.33 T
(oduced in a) 483.27 495.33 T
(number of special cir) 180 483.33 T
(cumstances: the total under\337ow of a * or / of terms of) 272.66 483.33 T
-0.25 (dif) 180 471.33 P
-0.25 (fer) 192.17 471.33 P
-0.25 (ent sign; the addition of -0 to itself or subtraction of positive zer) 204.06 471.33 P
-0.25 (o fr) 481.6 471.33 P
-0.25 (om it; the) 496.41 471.33 P
-0.07 (squar) 180 459.33 P
-0.07 (e r) 204.64 459.33 P
-0.07 (oot of -0. Converting -0 to a string r) 215.63 459.33 P
-0.07 (esults in a leading \324-\325. Apart fr) 370.74 459.33 P
-0.07 (om this,) 502.12 459.33 P
(the two zer) 180 447.33 T
(os ar) 229.49 447.33 T
(e indistinguishable.) 250.46 447.33 T
(Calculations which would pr) 180 423.33 T
(oduce a value beyond the range of the arithmetic) 308.53 423.33 T
(being used deliver a signed in\336nite r) 180 411.33 T
(esult. An in\336nity \050) 341.65 411.33 T
5 F
-0.5 (Inf) 422.14 411.33 S
0 F
(\051 has a lar) 438.64 411.33 T
(ger) 481.21 411.33 T
(magnitude than any value with the same sign. In\336nities of the same sign cannot) 180 399.33 T
-0.12 (be distinguished. Thus, for instance) 180 387.33 P
5 F
-0.27 -0.5 (\0501./0.\051 + \0501./0.\051 == \0501./0.\051.) 339.16 387.33 B
0 F
-0.12 ( Division) 497.6 387.33 P
(of a \336nite value by in\336nity yields a 0 r) 180 375.33 T
(esult.) 347.21 375.33 T
(Calculations which cannot pr) 180 351.33 T
(oduce any meaningful numeric r) 309.48 351.33 T
(esult deliver a) 454.23 351.33 T
-0.05 (distinguished r) 180 339.33 P
-0.05 (esult called Not A Number \050) 246.92 339.33 P
5 F
-0.12 -0.5 (NaN) 372.12 339.33 B
0 F
-0.05 (\051. Any operation having a NaN as) 388.62 339.33 P
-0.14 (an operand pr) 180 327.33 P
-0.14 (oduces a NaN as the r) 242.46 327.33 P
-0.14 (esult. NaN is not signed and not or) 338.85 327.33 P
-0.14 (der) 492.55 327.33 P
-0.14 (ed \050see) 507.23 327.33 P
(\322Or) 180 315.33 T
(dering\323 on page 30\051. Division of in\336nity by in\336nity yields NaN, as does) 196.63 315.33 T
(subtraction of one in\336nity fr) 180 303.33 T
(om another of the same sign.) 304.19 303.33 T
3 F
( A.2) 144 267.33 T
4 F
(Binary Format Conversion) 180 267.33 T
0 F
(Converting a \337oating-point value to an integer format r) 180 245.33 T
(esults in a value with the) 424.79 245.33 T
(same sign as the ar) 180 233.33 T
(gument value and having the lar) 263.27 233.33 T
(gest magnitude less than or) 407.68 233.33 T
(equal to that of the ar) 180 221.33 T
(gument. In other wor) 274.32 221.33 T
(ds, conversion r) 368.65 221.33 T
(ounds towar) 438.81 221.33 T
(ds zer) 494.8 221.33 T
(o.) 521.21 221.33 T
-0.16 (Converting in\336nity or any value beyond the range of the tar) 180 209.33 P
-0.16 (get integer type gives) 443.17 209.33 P
(a r) 180 197.33 T
(esult having the same sign as the ar) 191.27 197.33 T
(gument and the maximum magnitude of) 347.9 197.33 T
(that sign. Converting NaN r) 180 185.33 T
(esults in 0.) 304.07 185.33 T
(Converting an integer to a \337oating format r) 180 161.33 T
(esults in the closest possible value in) 371.12 161.33 T
-0.03 (the tar) 180 149.33 P
-0.03 (get format. T) 208.37 149.33 P
-0.03 (ies ar) 264.82 149.33 P
-0.03 (e br) 288 149.33 P
-0.03 (oken in favor of the most even value \050having 0 as the) 304.56 149.33 P
(least-signi\336cant bit\051.) 180 137.33 T
FMENDPAGE
%%EndPage: "29" 10
%%Page: "28" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(10 Garbage Collection) 257.64 750.67 T
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(28) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(Confidential) 477.67 30.67 T
0 10 Q
(The) 180 713.33 T
1 F
(\336nally) 199.24 713.33 T
0 F
( statement is executed even if the) 228.68 713.33 T
1 F
(try) 377.11 713.33 T
0 F
( block contains a) 389.89 713.33 T
1 F
(goto) 465.74 713.33 T
0 F
(,) 485.75 713.33 T
1 F
(return) 490.75 713.33 T
0 F
(,) 519.08 713.33 T
1 F
(break) 180 701.33 T
0 F
(,) 206.11 701.33 T
1 F
(continue) 211.11 701.33 T
0 F
(, or) 251.1 701.33 T
1 F
(throw) 268.01 701.33 T
0 F
( statement. For example, the following code example) 295.23 701.33 T
(always r) 180 689.33 T
(esults in \322\336nally\323 being printed, but \322after try\323 is never printed.) 217.32 689.33 T
5 9 Q
(try {) 198 667 T
(    if \050a==10\051) 198 658 T
(        return;) 198 649 T
(} f) 198 640 T
(inally {) 214.2 640 T
(    print\050"f) 198 631 T
(inally\134n"\051;) 262.8 631 T
(}) 198 622 T
(print\050"after try\134n"\051;) 198 613 T
0 10 Q
(9.4.2) 144 585.33 T
7 F
(Asynchr) 180 585.33 T
(onous Exceptions) 212.4 585.33 T
0 F
(Generally) 180 563.33 T
(, exceptions ar) 222.25 563.33 T
(e synchr) 285.4 563.33 T
(onous\321they ar) 322.34 563.33 T
(e thr) 390.05 563.33 T
(own by code executed) 410.19 563.33 T
(sequentially by an Oak pr) 180 551.33 T
(ogram. However) 293.93 551.33 T
(, in pr) 368.29 551.33 T
(ograms that have multiple) 394.3 551.33 T
(thr) 180 539.33 T
(eads of execution, one thr) 192.85 539.33 T
(ead can thr) 305.86 539.33 T
(ow an exception \050using Thr) 354.87 539.33 T
(ead\325s) 475.74 539.33 T
5 F
-0.5 (postException\050\051) 180 527.33 S
0 F
( instance method\051 to another thr) 262.5 527.33 T
(ead. The second thr) 404.55 527.33 T
(ead can\325t) 490.9 527.33 T
(pr) 180 515.33 T
(edict exactly when it will be thr) 189.78 515.33 T
(own an exception, so the exception is) 328.59 515.33 T
2 F
(asynchr) 180 503.33 T
(onous) 211.67 503.33 T
0 F
(.) 235.56 503.33 T
1 F
(Implementation Note:) 180 479.33 T
0 F
(As of Oak 0.2, no FirstPerson-supplied code thr) 288 479.33 T
(ows) 497.22 479.33 T
(asynchr) 180 467.33 T
(onous exceptions, so you don\325t need to worry about them unless you use) 214.65 467.33 T
(them in your own code.) 180 455.33 T
(By default, asynchr) 180 431.33 T
(onous exceptions can happen at any time. T) 265.25 431.33 T
(o pr) 457.49 431.33 T
(event) 475.23 431.33 T
-0.25 (asynchr) 180 419.33 P
-0.25 (onous exceptions fr) 214.65 419.33 P
-0.25 (om occuring in a critical section of code, you can mark) 300.14 419.33 P
(the code with the) 180 407.33 T
1 F
(protect) 258.87 407.33 T
0 F
( keywor) 290.53 407.33 T
(d, as shown below:) 326.51 407.33 T
5 9 Q
(protect {) 198 385 T
(    /* critical section goes here */) 198 376 T
(}) 198 367 T
0 10 Q
(T) 180 345.33 T
(o allow asynchr) 185.21 345.33 T
(onous exceptions to occur in an otherwise pr) 254.94 345.33 T
(otected section of) 452.26 345.33 T
(code, use the) 180 333.33 T
1 F
(unprotect) 239.73 333.33 T
0 F
( keywor) 283.61 333.33 T
(d, as follows:) 319.59 333.33 T
5 9 Q
(unprotect {) 198 311 T
(    /* code that can afford asynchronous exceptions  */) 198 302 T
(}) 198 293 T
0 14 Q
(10) 144 240.67 T
6 F
(Garbage Collection) 180 240.67 T
0 10 Q
(The Oak garbage collector makes most aspects of storage management simple) 180 215.33 T
-0.33 (and r) 180 203.33 P
-0.33 (obust. Oak pr) 202.87 203.33 P
-0.33 (ograms never need to explicitly fr) 262.43 203.33 P
-0.33 (ee storage: it is done for them) 409.52 203.33 P
(automatically) 180 191.33 T
(. The garbage collector never fr) 239.46 191.33 T
(ees pieces of memory that ar) 376.31 191.33 T
(e still) 502.13 191.33 T
(r) 180 179.33 T
(efer) 183.77 179.33 T
(enced, and it always fr) 200.45 179.33 T
(ees pieces that ar) 300.15 179.33 T
(e not. This makes both dangling) 374.76 179.33 T
(pointer bugs and storage leaks impossible. It also fr) 180 167.33 T
(ees designers fr) 406.92 167.33 T
(om having to) 475.25 167.33 T
(\336gur) 180 155.33 T
(e out which parts of a system have to be r) 201.41 155.33 T
(esponsible for managing storage.) 384.52 155.33 T
(The garbage collector also does compaction: it copies all objects to the beginning) 180 131.33 T
(of the heap, coalescing fr) 180 119.33 T
(ee space in one lar) 289.45 119.33 T
(ge chunk at the end. This eliminates) 369.99 119.33 T
(the loss of fr) 180 107.33 T
(ee space due to fragmentation.) 234.11 107.33 T
45 394 171 441.57 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 394 171 441.57 R
7 X
0 0 0 1 0 0 0 K
V
46.01 393 171 436.99 R
V
0 9 Q
0 X
(The default will pr) 46.01 430.99 T
(obably be) 120.28 430.99 T
(changed to) 46.01 421.99 T
2 F
(not) 92.14 421.99 T
0 F
( allow asynchr) 104.14 421.99 T
(o-) 161.98 421.99 T
(nous exceptions except in ex-) 46.01 412.99 T
(plicitly) 46.01 403.99 T
2 F
(unpr) 76.08 403.99 T
(otected) 93.92 403.99 T
0 F
( sections of) 119.08 403.99 T
(code.) 46.01 394.99 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "28" 11
%%Page: "27" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(27) 514 30.67 T
(9 Statements) 274.24 750.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
0 10 Q
(for an exception handler to r) 180 713.33 T
(esume execution at the point that the exception) 305.59 713.33 T
(occurr) 180 701.33 T
(ed.) 208.09 701.33 T
(For example, this code fragment:) 180 677.33 T
5 9 Q
(class Foo {};) 198 655 T
(print\050"now "\051;) 198 637 T
(try {) 198 628 T
(    print\050"is "\051;) 198 619 T
(    throw new Foo\050\051;) 198 610 T
(    print\050"a "\051;) 198 601 T
(} catch\050Foo p\051 {) 198 592 T
(    print\050"the "\051;) 198 583 T
(}) 198 574 T
(print\050"time\134n"\051;) 198 565 T
0 10 Q
-0.32 (prints \322now is the time\323. As this example shows, exceptions don\325t have to be used) 180 543.33 P
(only for err) 180 531.33 T
(or handling, but any other use is likely to r) 230 531.33 T
(esult in code that\325s har) 418.18 531.33 T
(d to) 517.89 531.33 T
(understand.) 180 519.33 T
-0.41 (Exception handlers can be nested, allowing exception handling to happen in mor) 180 495.33 P
-0.41 (e) 533.12 495.33 P
(than one place. Nested exception handling is often used when the \336rst handler) 180 483.33 T
(can\325t r) 180 471.33 T
(ecover completely fr) 207.57 471.33 T
(om the err) 297.71 471.33 T
(or) 343.38 471.33 T
(, and yet needs to execute some cleanup) 352.05 471.33 T
-0.07 (code \050as shown in the following code example\051. T) 180 459.33 P
-0.07 (o pass exception handling up to) 397.12 459.33 P
(the next higher handler) 180 447.33 T
(, use the) 282.91 447.33 T
1 F
(throw) 321.84 447.33 T
0 F
( keywor) 349.06 447.33 T
(d without specifying a) 385.04 447.33 T
(GenericException instance.) 180 435.33 T
(Note that the method that r) 302.07 435.33 T
(ethr) 422.98 435.33 T
(ows the exception) 440.62 435.33 T
(stops executing after the) 180 423.33 T
1 F
(throw) 290.17 423.33 T
0 F
( statement; it never r) 317.39 423.33 T
(eturns.) 408.08 423.33 T
5 9 Q
(try {) 198 401 T
(    f.open\050\051;) 198 392 T
(} catch\050GenericException e\051 {) 198 383 T
(    f.close\050\051;) 198 374 T
(    throw;) 198 365 T
(}) 198 356 T
0 10 Q
(9.4.1) 144 328.33 T
7 F
(The) 180 328.33 T
4 F
(\336nally) 197.5 328.33 T
7 F
( Statement) 224.18 328.33 T
0 F
(The following example shows the use of a) 180 306.33 T
1 F
(\336nally) 367.75 306.33 T
0 F
( statement that is useful for) 397.19 306.33 T
(guaranteeing that some code gets executed whether or not an exception occurs.) 180 294.33 T
(Y) 180 282.33 T
(ou can use either a) 185.75 282.33 T
1 F
( catch) 268.08 282.33 T
0 F
( statement or a) 293.9 282.33 T
1 F
(\336nally) 361.56 282.33 T
0 F
( statement within a particular) 391 282.33 T
1 F
(try) 524.27 282.33 T
0 F
(block, but not both.) 180 270.33 T
( For example, the following code example:) 265.83 270.33 T
5 9 Q
(try {) 198 248 T
8 F
(    /* do something */) 198 239 T
5 F
(} finally {) 198 230 T
8 F
(/* clean up after it */) 219.6 221 T
5 F
(}) 198 212 T
0 10 Q
(is similar to:) 180 190.33 T
5 9 Q
(try {) 198 168 T
8 F
(    /* do something */) 198 159 T
5 F
(} catch\050Object e\051{) 198 150 T
8 F
(    /* clean up after it */) 198 141 T
5 F
(throw;) 219.6 132 T
(}) 198 123 T
8 F
(/* clean up after it */) 198 114 T
FMENDPAGE
%%EndPage: "27" 12
%%Page: "26" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(9 Statements) 274.24 750.67 T
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(26) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(Confidential) 477.67 30.67 T
5 9 Q
(continue;) 198 714 T
(return) 198 694 T
8 F
(e1) 235.8 694 T
5 F
(;) 246.6 694 T
(for\050) 198 674 T
8 F
(e1) 219.6 674 T
5 F
(;) 230.4 674 T
8 F
(e2;) 241.2 674 T
(e3) 262.8 674 T
5 F
(\051) 273.6 674 T
8 F
(statement) 284.4 674 T
5 F
(while\050) 198 654 T
8 F
(boolean) 230.4 654 T
5 F
(\051) 268.2 654 T
8 F
(statement) 279 654 T
5 F
(do) 198 634 T
8 F
(statement) 214.2 634 T
5 F
(while\050) 198 625 T
8 F
(boolean) 230.4 625 T
5 F
(\051;) 268.2 625 T
0 10 Q
( 9.4) 144 591.33 T
4 F
(Exceptions) 180 591.33 T
4 8 Q
(1) 226.67 595.33 T
0 10 Q
(When an err) 180 569.33 T
(or occurs in an Oak pr) 234.76 569.33 T
(ogram\321for example, when an ar) 332.98 569.33 T
(gument has) 478.87 569.33 T
(an invalid value\321the code that detects the err) 180 557.33 T
(or can) 383.29 557.33 T
2 F
(thr) 412.96 557.33 T
(ow) 425 557.33 T
0 F
(an exception. By) 439.16 557.33 T
(default, exceptions r) 180 545.33 T
(esult in the thr) 269.58 545.33 T
(ead terminating with an err) 333.76 545.33 T
(or message.) 455.43 545.33 T
(However) 180 533.33 T
(, pr) 220.56 533.33 T
(ograms can have) 235.34 533.33 T
2 F
(exception handlers) 312.4 533.33 T
0 F
( that) 387.31 533.33 T
2 F
(catch) 409.65 533.33 T
0 F
( the exception and) 430.56 533.33 T
(r) 180 521.33 T
(ecover fr) 183.77 521.33 T
(om the err) 222.45 521.33 T
(or) 268.12 521.33 T
(.) 276.79 521.33 T
(Some exceptions ar) 180 497.33 T
(e thr) 264.98 497.33 T
(own by the Oak r) 285.12 497.33 T
(untime system. However) 361.99 497.33 T
(, any class can) 472.61 497.33 T
(de\336ne its own exceptions and cause them to occur using) 180 485.33 T
1 F
(throw) 431.2 485.33 T
0 F
( statements. A) 458.42 485.33 T
1 F
(throw) 180 473.33 T
0 F
( statement consists of the) 207.22 473.33 T
1 F
(throw) 320.24 473.33 T
0 F
( keywor) 347.46 473.33 T
(d followed by an object. By) 383.44 473.33 T
(convention, the object should be an instance of GenericException or one of its) 180 461.33 T
(subclasses. The) 180 449.33 T
1 F
(throw) 249.9 449.33 T
0 F
( statement causes execution to switch to the appr) 277.12 449.33 T
(opriate) 492.88 449.33 T
(exception handler) 180 437.33 T
(. When a) 258.8 437.33 T
1 F
(throw) 300.23 437.33 T
0 F
( statement is executed, any code following it is) 327.45 437.33 T
(not executed, and no value is r) 180 425.33 T
(eturned by its enclosing method. The following) 314.92 425.33 T
(example shows how to cr) 180 413.33 T
(eate a subclass of GenericException and thr) 292.14 413.33 T
(ow an) 483.47 413.33 T
(exception.) 180 401.33 T
5 9 Q
(class MyException extends GenericException {};) 198 379 T
(if \050) 198 361 T
8 F
(/* no error occurred */) 219.6 361 T
5 F
(\051) 343.8 361 T
8 F
(/* do something */) 219.6 352 T
5 F
(else) 198 343 T
8 F
(/* error occurred */) 225 343 T
5 F
(    throw new MyException\050\051;) 198 334 T
0 10 Q
-0.27 (T) 180 312.33 P
-0.27 (o de\336ne an exception handler) 185.21 312.33 P
-0.27 (, the pr) 314.25 312.33 P
-0.27 (ogram must \336rst surr) 344.85 312.33 P
-0.27 (ound the code that can) 438.18 312.33 P
(cause the exception with a) 180 300.33 T
1 F
(try) 298.84 300.33 T
0 F
( statement. After the) 311.62 300.33 T
1 F
(try) 404.35 300.33 T
0 F
( statement come one or) 417.13 300.33 T
(mor) 180 288.33 T
(e) 198.06 288.33 T
1 F
(catch) 205.35 288.33 T
0 F
( clauses\321one per exception class that the pr) 228.67 288.33 T
(ogram can handle at that) 423.1 288.33 T
(point. In each) 180 276.33 T
1 F
(catch) 242.7 276.33 T
0 F
( clause is exception handling code) 266.02 276.33 T
(. For example:) 416.47 276.33 T
5 9 Q
(try {) 198 254 T
(    p.a = 10;) 198 245 T
(} catch \050NullPointerException e\051 {) 198 236 T
(    print\050"p was null\134n"\051;) 198 227 T
(} catch \050GenericException e\051 {) 198 218 T
(    print\050"other error occurred\134n"\051;) 198 209 T
(}) 198 200 T
0 10 Q
(A) 180 178.33 T
1 F
(catch) 190.28 178.33 T
0 F
( clause is like a method de\336nition with exactly one parameter and no) 213.6 178.33 T
(r) 180 166.33 T
(eturn type. When an exception occurs, the r) 183.77 166.33 T
(untime system sear) 375.93 166.33 T
(ches the nested) 461.29 166.33 T
1 F
(try) 180 154.33 T
0 F
(/) 192.78 154.33 T
1 F
(catch) 198.84 154.33 T
0 F
( clauses. The \336rst one with a parameter type that is the same class or a) 222.16 154.33 T
(super) 180 142.33 T
(class of the thr) 204.84 142.33 T
(own object has its) 268.68 142.33 T
1 F
(catch) 349.59 142.33 T
0 F
( clause executed. After the) 372.91 142.33 T
1 F
(catch) 491.67 142.33 T
0 F
-0.27 (clause executes, execution r) 180 130.33 P
-0.27 (esumes after the) 300.52 130.33 P
1 F
-0.27 (try) 374.32 130.33 P
0 F
-0.27 (/) 387.1 130.33 P
1 F
-0.27 (catch) 393.16 130.33 P
0 F
-0.27 ( statement. It is not possible) 416.48 130.33 P
54 93 540 108 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 106 207 106 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 8 Q
0 X
0 0 0 1 0 0 0 K
(1. Oak exception handling closely follows the pr) 180 87.67 T
(oposal in the second edition of) 350.1 87.67 T
2 F
(The C++ Pr) 460.17 87.67 T
(ogramming) 499.05 87.67 T
(Language) 189 78.67 T
0 F
(, by Bjarne Str) 220.56 78.67 T
(oustr) 269.66 78.67 T
(up.) 287.95 78.67 T
FMENDPAGE
%%EndPage: "26" 13
%%Page: "25" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(25) 514 30.67 T
(9 Statements) 274.24 750.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
0 10 Q
( 8.2) 144 713.33 T
4 F
(Casts and Conversions) 180 713.33 T
0 F
(The Oak language and r) 180 691.33 T
(untime system r) 286.63 691.33 T
(estrict casts and conversions to help) 357.96 691.33 T
(pr) 180 679.33 T
(event the possibility of corr) 189.78 679.33 T
(upting the system. Integers and \337oating point) 310.41 679.33 T
(numbers can be cast back and forth, but integers cannot be cast to arrays or) 180 667.33 T
(objects. An instance can be cast to a super) 180 655.33 T
(class with no penalty) 363.52 655.33 T
(, but casting to a) 455.7 655.33 T
(subclass generates a r) 180 643.33 T
(untime check. If the object being cast to a subclass is not an) 275.2 643.33 T
(instance of the subclass \050or one of its subclasses\051, the r) 180 631.33 T
(untime system thr) 417.81 631.33 T
(ows an) 498.22 631.33 T
(InvalidClassCastException.) 180 619.33 T
0 14 Q
(9) 144 564.67 T
6 F
(Statements) 180 564.67 T
0 10 Q
( 9.1) 144 527.33 T
4 F
(Declarations) 180 527.33 T
0 F
(Declarations can appear anywher) 180 505.33 T
(e that a statement is allowed. The scope of the) 328.14 505.33 T
(declaration ends at the end of the enclosing block.) 180 493.33 T
(In addition, declarations ar) 180 469.33 T
(e allowed at the head of) 299.43 469.33 T
1 F
(for) 407.38 469.33 T
0 F
( statements, as shown) 420.72 469.33 T
(below:) 180 457.33 T
5 9 Q
(for \050int i = 0; i<10; i++\051 . . .) 198 435 T
0 10 Q
(Items declar) 180 413.33 T
(ed in this way ar) 234.01 413.33 T
(e valid only within the scope of the) 307.54 413.33 T
1 F
(for) 465.19 413.33 T
0 F
( statement.) 478.53 413.33 T
(For example, the pr) 180 401.33 T
(eceding code sample is equivalent to the following:) 266.11 401.33 T
5 9 Q
({) 198 379 T
(    int i = 0;) 198 370 T
(    for \050; i<10; i++\051 . . .) 198 361 T
(}) 198 352 T
0 10 Q
( 9.2) 144 318.33 T
4 F
(Expr) 180 318.33 T
(essions) 201.49 318.33 T
0 F
(As in C, expr) 180 296.33 T
(essions ar) 237.57 296.33 T
(e statements:) 280.54 296.33 T
5 9 Q
(a = 3;) 198 274 T
(print\05023\051;) 198 265 T
0 10 Q
( 9.3) 144 231.33 T
4 F
(Contr) 180 231.33 T
(ol Flow) 205.37 231.33 T
0 F
(Except for the) 180 209.33 T
1 F
(for) 243.88 209.33 T
0 F
( statement, which can contain declarations \050as described in) 257.22 209.33 T
(\322Declarations\323 on page 25\051, this is just like C:) 180 197.33 T
5 9 Q
(if\050) 198 175 T
8 F
(boolean) 214.2 175 T
5 F
(\051) 252 175 T
8 F
(statement) 262.8 175 T
5 F
(else) 198 166 T
8 F
(statement) 225 166 T
5 F
(switch\050) 198 146 T
8 F
(e1) 235.8 146 T
5 F
(\051 {) 246.6 146 T
(    case) 198 137 T
8 F
(e2) 246.6 137 T
5 F
(:) 257.4 137 T
8 F
(statements) 268.2 137 T
5 F
(    default:) 198 128 T
8 F
(statements) 268.2 128 T
5 F
(}) 198 119 T
(break;) 198 99 T
(goto) 198 79 T
8 F
(label) 225 79 T
5 F
(;) 252 79 T
FMENDPAGE
%%EndPage: "25" 14
%%Page: "24" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(8 Expressions) 272.47 750.67 T
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(24) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(Confidential) 477.67 30.67 T
0 10 Q
(r) 180 713.33 T
(esults. Floating point operations cannot cause exceptions, but they can pr) 183.77 713.33 T
(oduce) 506.55 713.33 T
(the special values of In\336nity or Not-a-Number) 180 701.33 T
(.) 384.17 701.33 T
(The usual r) 180 677.33 T
(elational operators ar) 229.72 677.33 T
(e also available, and pr) 323.67 677.33 T
(oduce) 424.98 677.33 T
1 F
(boolean) 454.31 677.33 T
0 F
( r) 490.98 677.33 T
(esults:) 497.25 677.33 T
1 F
(>) 527.72 677.33 T
0 F
(,) 533.78 677.33 T
1 F
-0.35 (<) 180 665.33 P
0 F
-0.35 (,) 186.06 665.33 P
1 F
-0.35 (>=) 190.71 665.33 P
0 F
-0.35 (,) 202.83 665.33 P
1 F
-0.35 (<=) 207.49 665.33 P
0 F
-0.35 (,) 219.61 665.33 P
1 F
-0.35 (==) 224.26 665.33 P
0 F
-0.35 (,) 236.38 665.33 P
1 F
-0.35 (!=) 241.03 665.33 P
0 F
-0.35 (. Because of the pr) 249.87 665.33 P
-0.35 (operties of Not-a-Number) 328.82 665.33 P
-0.35 (, \337oating point values) 442.72 665.33 P
(ar) 180 653.33 T
(e not fully or) 188.77 653.33 T
(der) 245.57 653.33 T
(ed, so car) 260.24 653.33 T
(e must be taken in comparison. For instance, if) 301.55 653.33 T
5 F
-0.5 (a<b) 509.29 653.33 S
0 F
( is) 525.79 653.33 T
-0.16 (not tr) 180 641.33 P
-0.16 (ue, it does not follow that) 204.01 641.33 P
5 F
-0.35 -0.5 (a>=b) 318.45 641.33 B
0 F
-0.16 (. Likewise,) 340.45 641.33 P
5 F
-0.35 -0.5 (a!=b) 389.78 641.33 B
0 F
-0.16 ( does not imply that) 411.78 641.33 P
5 F
-0.35 -0.5 (a>b ||) 502.19 641.33 B
-0.5 (a<b) 180 629.33 S
0 F
(. In fact, ther) 196.5 629.33 T
(e may no or) 251.86 629.33 T
(dering at all.) 304.05 629.33 T
-0.27 (Floating point arithmetic and data formats ar) 180 605.33 P
-0.27 (e de\336ned by IEEE 754, \322Standar) 377.61 605.33 P
-0.27 (d for) 516.7 605.33 P
-0.16 (Floating Point Arithmetic.\323 See \322Appendix: Floating Point\323 on page 29 for details) 180 593.33 P
(on the Oak language\325s \337oating point implementation.) 180 581.33 T
(8.1.4) 144 551.33 T
7 F
(Operators on Strings) 180 551.33 T
0 F
(The operator) 180 529.33 T
1 F
(+) 239.62 529.33 T
0 F
( concatenates Strings, automatically converting operands into) 245.68 529.33 T
(Strings if necessary) 180 517.33 T
(.) 263.95 517.33 T
5 9 Q
(f) 198 495 T
(loat a = 1.0;) 203.4 495 T
(print\050"The value of a is " + a + "\134n"\051;) 198 486 T
(print\050"" + 1.01 + 2 + "\134n"\051;) 198 477 T
(print\0501.01 + 2 + "\134n"\051;    // = \0501.01 + 2\051 + "\134n") 198 468 T
(The value of a is 1) 198 450 T
(1.012) 198 441 T
(3.01) 198 432 T
0 10 Q
(The += and ++ operators also work on Strings. They and their r) 180 410.33 T
(ough equivalents) 459.45 410.33 T
(ar) 180 398.33 T
(e shown below) 188.77 398.33 T
(. Note, however) 254.35 398.33 T
(, that the left hand side \050) 324.23 398.33 T
5 F
-0.5 (s1) 431.36 398.33 S
0 F
( in the following) 442.36 398.33 T
(examples\051 is evaluated only once.) 180 386.33 T
5 9 Q
(s1 += a; //s1 = s1 + a; a is converted to String if necessary) 198 364 T
(s1++;    //s1 = s1 + "1") 198 344 T
0 10 Q
-0.41 (The) 180 322.33 P
1 F
-0.41 (print\050\051) 198.84 322.33 P
0 F
-0.41 ( operator prints the ar) 228.26 322.33 P
-0.41 (gument speci\336ed in its par) 323.36 322.33 P
-0.41 (entheses, coer) 439.29 322.33 P
-0.41 (cing it to) 500.09 322.33 P
-0.19 (be a String if necessary) 180 310.33 P
-0.19 (. The) 279.27 310.33 P
1 F
-0.19 (println\050\051) 303.13 310.33 P
0 F
-0.19 ( operator is the same as) 342 310.33 P
1 F
-0.19 (print\050\051) 446.87 310.33 P
0 F
-0.19 (, except that it) 476.3 310.33 P
(adds) 180 298.33 T
5 F
-0.5 ("\134n") 203.96 298.33 S
0 F
( \050the newline character\051 to the end of the speci\336ed String.) 225.96 298.33 T
(8.1.5) 144 268.33 T
7 F
(Operators on Objects) 180 268.33 T
0 F
-0.32 (The unary operator) 180 246.33 P
1 F
-0.32 (clone) 267.52 246.33 P
0 F
-0.32 (is applied to an object. It atomically allocates space for a) 294.14 246.33 P
(new instance of the same class and copies the contents of the existing object into) 180 234.33 T
-0.38 (it, making the new object an exact, shallow copy of the old one. For example, if the) 180 222.33 P
(existing object r) 180 210.33 T
(efers to another object, the clone r) 249.24 210.33 T
(efers to the same object\321the) 397.54 210.33 T
-0.33 (r) 180 198.33 P
-0.33 (eferr) 183.77 198.33 P
-0.33 (ed-to object is not cloned. The) 204.4 198.33 P
1 F
-0.33 (clone) 336.64 198.33 P
0 F
-0.33 ( operator is normally used inside) 361.08 198.33 P
1 F
-0.33 (new) 507.5 198.33 P
0 F
-0.33 ( to) 526.94 198.33 P
(clone the pr) 180 186.33 T
(ototype of some class, befor) 232.07 186.33 T
(e applying the initializers \050constr) 354.19 186.33 T
(uctors\051.) 499.66 186.33 T
-0.15 (The binary operator) 180 162.33 P
1 F
-0.15 (instanceof) 270.45 162.33 P
0 F
-0.15 ( tests whether the specified object is an instance of) 317.66 162.33 P
(the specified class or one of its subclasses. For example,) 180 150.33 T
5 9 Q
(\050thermostat instanceof MeasuringDevice\051) 198 128 T
0 10 Q
(determines whether thermostat is a MeasuringDevice object \050an instance of) 180 106.33 T
(MeasuringDevice or one of its subclasses\051.) 180 94.33 T
45 276.86 171 336.14 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 276.86 171 336.14 R
7 X
0 0 0 1 0 0 0 K
V
46.01 278.57 171 331.56 R
V
1 9 Q
0 X
(print\050\051) 46.01 325.56 T
0 F
( and) 72.5 325.56 T
1 F
(println\050\051) 92.23 325.56 T
0 F
( ar) 127.21 325.56 T
(en\325t r) 137.36 325.56 T
(e-) 157.99 325.56 T
(ally operators; they\325r) 46.01 316.56 T
(e Oak-de-) 128.79 316.56 T
(\336ned global methods. Such) 46.01 307.56 T
-0.2 (global methods ar) 46.01 298.56 P
-0.2 (e expected to) 117.29 298.56 P
(be r) 46.01 289.56 T
(eplaced by class-based) 60.94 289.56 T
(methods.) 46.01 280.56 T
0 0 612 792 C
45 129.76 171 169 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 129.76 171 169 R
7 X
0 0 0 1 0 0 0 K
V
46.01 124 171 167.99 R
V
1 9 Q
0 X
(instanceof) 46.01 161.99 T
0 F
( might be r) 88.5 161.99 T
(eplaced) 131.67 161.99 T
(by an operator that is mor) 46.01 152.99 T
(e dy-) 149.36 152.99 T
-0.18 (namic. It might become a meth-) 46.01 143.99 P
(od.) 46.01 134.99 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "24" 15
%%Page: "23" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(23) 514 30.67 T
(8 Expressions) 272.47 750.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
1 10 Q
(T) 180 713.33 T
(able 2. Binary Integer Operators: integer) 185.56 713.33 T
2 F
(op) 371.11 713.33 T
1 F
(integer) 383.05 713.33 T
9 14 Q
(\336) 417.77 713.33 T
1 10 Q
( integer) 431.59 713.33 T
0 F
(Integer division r) 180 475.33 T
(ounds towar) 256.32 475.33 T
(d zer) 312.31 475.33 T
(o. Division and modulus obey the identity) 334.48 475.33 T
5 F
-0.09 -0.5 (\050a/b\051*b + \050a%b\051 == a) 180 463.33 B
0 F
-0.04 (. Although it may not be obvious that) 289.63 463.33 P
1 F
-0.04 (%) 457.48 463.33 P
0 F
-0.04 ( could over\337ow) 466.37 463.33 P
-0.04 (,) 535.04 463.33 P
(it does for a zer) 180 451.33 T
(o divisor) 248.07 451.33 T
(.) 286.52 451.33 T
(An) 180 427.33 T
2 F
(op) 196.1 427.33 T
0 F
(= assignment operator corr) 205.54 427.33 T
(esponds to each of the binary) 325.07 427.33 T
(operators in the) 456.94 427.33 T
(above table.) 180 415.33 T
(The integer r) 180 391.33 T
(elational operators) 236.59 391.33 T
1 F
(<) 321.77 391.33 T
0 F
(,) 327.83 391.33 T
1 F
(>) 332.83 391.33 T
0 F
(,) 338.89 391.33 T
1 F
(<=) 343.89 391.33 T
0 F
(,) 356.01 391.33 T
1 F
(>=) 361.01 391.33 T
0 F
(,) 373.13 391.33 T
1 F
(==) 378.13 391.33 T
0 F
(, and) 390.25 391.33 T
1 F
(!=) 414.68 391.33 T
0 F
(pr) 426.02 391.33 T
(oduce) 435.8 391.33 T
1 F
(boolean) 465.13 391.33 T
0 F
( r) 501.8 391.33 T
(esults.) 508.07 391.33 T
(They cannot over\337ow) 180 379.33 T
(.) 275.91 379.33 T
(8.1.2) 144 349.33 T
7 F
(Operators on Boolean V) 180 349.33 T
(alues) 276.94 349.33 T
0 F
-0.15 (V) 180 327.33 P
-0.15 (ariables or expr) 186.3 327.33 P
-0.15 (essions that ar) 254.47 327.33 P
-0.15 (e) 316.98 327.33 P
1 F
-0.15 (boolean) 324.12 327.33 P
0 F
-0.15 (can be combined to yield other) 363.14 327.33 P
1 F
-0.15 (boolean) 500.98 327.33 P
0 F
-0.38 (values. The unary operator) 180 315.33 P
1 F
-0.38 ( !) 298.47 315.33 P
0 F
-0.38 (is boolean negation. The binary operators) 305.5 315.33 P
1 F
-0.38 (&) 489.12 315.33 P
0 F
-0.38 (,) 497.45 315.33 P
1 F
-0.38 (|) 502.08 315.33 P
0 F
-0.38 (, and) 508.14 315.33 P
1 F
-0.38 (^) 531.82 315.33 P
0 F
(ar) 180 303.33 T
(e the logical AND, OR, and XOR operators; they for) 188.77 303.33 T
(ce evaluation of both) 417.24 303.33 T
(operands. T) 180 291.33 T
(o avoid evaluation of right-hand operands, you can use the short-cut) 231.59 291.33 T
(evaluation operators) 180 279.33 T
1 F
(&&) 273.95 279.33 T
0 F
( and) 290.61 279.33 T
1 F
(||) 312.54 279.33 T
0 F
(. Y) 324.66 279.33 T
(ou can also use == and !=. The assignment) 335.41 279.33 T
(operators also work:) 180 267.33 T
1 F
(&=) 273.04 267.33 T
0 F
(,) 287.43 267.33 T
1 F
(|=) 292.43 267.33 T
0 F
(,) 304.55 267.33 T
1 F
(^=) 309.55 267.33 T
0 F
(. The conditional operator ?: works much as it) 321.67 267.33 T
(does in C.) 180 255.33 T
(8.1.3) 144 225.33 T
7 F
(Operators on Floating Point V) 180 225.33 T
(alues) 302.23 225.33 T
0 F
-0.03 (Floating point values can be combined using the usual operators: unary) 180 203.33 P
1 F
-0.03 ( \320) 496.33 203.33 P
0 F
-0.03 (; binary) 503.79 203.33 P
1 F
(+) 180 191.33 T
0 F
(,) 186.06 191.33 T
1 F
( \320) 188.56 191.33 T
0 F
(,) 196.06 191.33 T
1 F
(*) 201.06 191.33 T
0 F
(, and) 205.5 191.33 T
1 F
(/) 229.93 191.33 T
0 F
(; and the assignment operators) 232.89 191.33 T
1 F
(+=) 371.28 191.33 T
0 F
(,) 383.4 191.33 T
1 F
( \320=) 385.9 191.33 T
0 F
(,) 399.46 191.33 T
1 F
(*=) 404.46 191.33 T
0 F
(, and) 414.96 191.33 T
1 F
(/=) 439.39 191.33 T
0 F
(. The ++ and --) 448.41 191.33 T
(operators also work on \337oating point values \050they add or subtract 1.0\051. In) 180 179.33 T
(addition, % and %= work on \337oating point values. Operators that work on) 180 167.33 T
(integers but that ar) 180 155.33 T
(en\325t listed in this section work on \337oating point values by \336rst) 263.75 155.33 T
(converting the \337oating point values into integers.) 180 143.33 T
(Floating point expr) 180 119.33 T
(essions involving only single-pr) 264.67 119.33 T
(ecision operands ar) 405.65 119.33 T
(e) 491.37 119.33 T
-0.01 (evaluated using single-pr) 180 107.33 P
-0.01 (ecision operations and pr) 292.42 107.33 P
-0.01 (oduce single-pr) 404.06 107.33 P
-0.01 (ecision r) 472.71 107.33 P
-0.01 (esults.) 509.54 107.33 P
(Floating point expr) 180 95.33 T
(essions that involve at least one double-pr) 264.67 95.33 T
(ecision operand ar) 450.37 95.33 T
(e) 531.85 95.33 T
(evaluated using double-pr) 180 83.33 T
(ecision operations and pr) 297.04 83.33 T
(oduce double-pr) 408.72 83.33 T
(ecision) 481.99 83.33 T
1 F
(Operator) 195.45 688 T
(Operation) 278.67 688 T
0 F
(+) 212.97 672.33 T
(addition) 258 672.33 T
(\320) 213.5 656.33 T
(subtraction) 258 656.33 T
(*) 214.05 640.33 T
(multiplication) 258 640.33 T
(/) 212.97 624.33 T
(division) 258 624.33 T
(%) 211.8 608.33 T
(modulus) 258 608.33 T
(&) 212.11 592.33 T
(bitwise AND) 258 592.33 T
(|) 212.97 576.33 T
(bitwise OR) 258 576.33 T
(^) 212.97 560.33 T
(bitwise XOR) 258 560.33 T
(<<) 209.94 544.33 T
(left shift) 258 544.33 T
(>>) 209.94 522.33 T
(sign-propagating) 258 528.33 T
(right shift) 258 516.33 T
(>>>) 206.91 500.33 T
(zero-fill right shift) 258 500.33 T
180 682 352 682 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
45 290.06 153 325.3 C
0 0 0 1 0 0 0 K
45 249.02 153 321.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(The &, |, and ^ operators) 45 315.02 T
-0.18 (ar) 45 306.02 P
-0.18 (en\325t implemented yet for) 52.89 306.02 P
1 F
(boolean) 45 297.02 T
0 F
( values..) 78 297.02 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
45 178.06 153 214.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 137.02 153 209.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(Double pr) 45 203.02 T
(ecision and spe-) 85.27 203.02 T
(cial mathematical values) 45 194.02 T
(ar) 45 185.02 T
(e not implemented yet.) 52.89 185.02 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "23" 16
%%Page: "22" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(8 Expressions) 272.47 750.67 T
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(22) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(Confidential) 477.67 30.67 T
0 14 Q
(8) 144 710.67 T
6 F
(Expressions) 180 710.67 T
0 10 Q
(Expr) 180 685.33 T
(essions in the Oak language ar) 201.05 685.33 T
(e much like expr) 335.71 685.33 T
(essions in C.) 409.02 685.33 T
( 8.1) 144 649.33 T
4 F
(Operators) 180 649.33 T
0 F
(The Oak operators, fr) 180 627.33 T
(om highest to lowest priority) 274.38 627.33 T
(, ar) 402.8 627.33 T
(e:) 416.57 627.33 T
5 9 Q
(. [] \050\051) 198 605 T
(++ -- ! ~ instanceof new clone) 198 596 T
(* / %) 198 587 T
(+ -) 198 578 T
(<< >> >>>) 198 569 T
(< > <= >=) 198 560 T
(== !=) 198 551 T
(&) 198 542 T
(^) 198 533 T
(|) 198 524 T
(&&) 198 515 T
(||) 198 506 T
(?:) 198 497 T
(=) 198 488 T
8 F
(op) 208.8 488 T
5 F
(=) 219.6 488 T
(,) 198 479 T
0 10 Q
(8.1.1) 144 451.33 T
7 F
(Operators on Integers) 180 451.33 T
0 F
(For operators with integer r) 180 429.33 T
(esults, if any operand is) 302.27 429.33 T
1 F
(long) 409.65 429.33 T
0 F
(, the r) 430.21 429.33 T
(esult type is) 455.35 429.33 T
1 F
(long) 510.85 429.33 T
0 F
(.) 531.41 429.33 T
(Otherwise the r) 180 417.33 T
(esult type is) 248.6 417.33 T
1 F
(int) 304.1 417.33 T
0 F
(\321never) 316.87 417.33 T
1 F
(byte) 354.37 417.33 T
0 F
( or) 374.37 417.33 T
1 F
(short) 388.78 417.33 T
0 F
(. When a r) 412.11 417.33 T
(esult outside an) 457.31 417.33 T
(operator) 180 405.33 T
(\325s range would be pr) 218.62 405.33 T
(oduced, the r) 309.71 405.33 T
(esult is r) 367.79 405.33 T
(educed modulo the range of) 404.94 405.33 T
(the r) 180 393.33 T
(esult type.) 200.14 393.33 T
1 F
(T) 180 369.33 T
(able 1. Unary Integer Operators:) 185.56 369.33 T
2 F
(op) 334.17 369.33 T
1 F
( integer) 343.61 369.33 T
9 14 Q
(\336) 380.83 369.33 T
1 10 Q
( integer) 394.65 369.33 T
(Operator) 195.45 344 T
(Operation) 283.17 344 T
0 F
(\320) 213.5 328.33 T
(unary negation) 258 328.33 T
(~) 212.97 312.33 T
(bitwise complement) 258 312.33 T
180 338 361 338 2 L
V
0.5 H
0 Z
N
FMENDPAGE
%%EndPage: "22" 17
%%Page: "21" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(21) 514 30.67 T
(7 Assertions) 274.96 750.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
0 14 Q
(7) 144 710.67 T
6 F
(Assertions) 180 710.67 T
0 10 Q
-0.15 (The Oak language has a set of facilities that allow assertions to be made about the) 180 689.33 P
(behavior of pr) 180 677.33 T
(ograms. These allow extensive checking and a corr) 242.68 677.33 T
(esponding) 466.41 677.33 T
(incr) 180 665.33 T
(ease in the r) 196.94 665.33 T
(eliability of pr) 249.63 665.33 T
(ograms. A failed assertion r) 311.89 665.33 T
(esults in an) 433.7 665.33 T
(AssertionFailedException \050see \322Exceptions\323 on page 26\051.) 180 653.33 T
( 7.1) 144 617.33 T
4 F
(Constraints on Instance V) 180 617.33 T
(ariables and Methods) 290.47 617.33 T
0 F
(The) 180 601.33 T
1 F
(assert) 199.24 601.33 T
0 F
( keywor) 225.34 601.33 T
(d can be used to declar) 261.32 601.33 T
(e a set of constraints on instance) 362.42 601.33 T
(variables and methods. This enables concise documentation of a class designer) 180 589.33 T
(\325s) 527.92 589.33 T
(intentions. The annotations also serve as a binding contract between a class) 180 577.33 T
(designer and a class maintainer) 180 565.33 T
(.) 318.48 565.33 T
-0.31 (While objects ar) 180 541.33 P
-0.31 (e not r) 249.64 541.33 P
-0.31 (equir) 277.12 541.33 P
-0.31 (ed to obey the legality constraints within methods, the) 300.22 541.33 P
(constraints ar) 180 529.33 T
(e enfor) 239.67 529.33 T
(ced at the entry and exit of every public and pr) 270.13 529.33 T
(otected) 477.1 529.33 T
(method. In classes that use) 180 517.33 T
1 F
(assert) 300.72 517.33 T
0 F
( for all variables, all public and pr) 326.82 517.33 T
(otected) 475.72 517.33 T
-0.04 (methods can expect to operate on a coher) 180 505.33 P
-0.04 (ent object and have the r) 361.95 505.33 P
-0.04 (esponsibility of) 469.75 505.33 P
(r) 180 493.33 T
(estoring coher) 183.77 493.33 T
(ence befor) 246.54 493.33 T
(e \336nishing. The following example shows how to use) 291.76 493.33 T
1 F
(assert) 180 481.33 T
0 F
( to constrain the values of two instance variables.) 206.1 481.33 T
5 9 Q
(class Calender {) 198 459 T
(    static int lastDay[12]=) 198 450 T
(            {31,29,31,30,31,30,31,31,30,31,30,31};) 198 441 T
(    int month assert\050month >=1 && month <=12\051;) 198 432 T
(    int date assert\050date>=1 && date<=lastDay[month]\051;) 198 423 T
(}) 198 414 T
0 10 Q
( 7.2) 144 380.33 T
4 F
(Pr) 180 380.33 T
(econditions and Postconditions) 190.37 380.33 T
0 F
(The behavior of a method can be speci\336ed by a set of pr) 180 364.33 T
(econditions that must) 425.78 364.33 T
(hold befor) 180 352.33 T
(e the method begins and a set of postconditions that must hold after it) 225.68 352.33 T
(\336nishes.) 180 340.33 T
5 9 Q
(class Stack {) 198 318 T
(    int length;) 198 309 T
(    Element element[];) 198 300 T
(    boolean full\050\051 {        /* . . . */ };) 198 291 T
(    boolean empty\050\051 { return length==0; }) 198 282 T
(    Element pop\050\051 {) 198 262 T
(        precondition: !empty\050\051;) 198 253 T
(        /* . . . */) 198 244 T
(        postcondition: !full\050\051;) 198 235 T
(    }) 198 226 T
(    void push\050Element x\051 {) 198 206 T
(        precondition: !full\050\051;) 198 197 T
(        /* . . . */) 198 188 T
(        postcondition: !empty\050\051;) 198 179 T
(    }) 198 170 T
(}) 198 161 T
0 10 Q
(Pr) 180 139.33 T
(econditions and postconditions ar) 189.81 139.33 T
(e inherited by subclasses: methods) 339.63 139.33 T
-0.22 (overridden by a subclass must obey the pr) 180 127.33 P
-0.22 (econditions and postconditions of their) 365.55 127.33 P
(super) 180 115.33 T
(class. Inherited pr) 204.84 115.33 T
(econditions and postconditions cannot be r) 283.77 115.33 T
(estricted or) 473.71 115.33 T
(r) 180 103.33 T
(ede\336ned.) 183.77 103.33 T
45 675.33 153 698.59 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 623.02 153 695.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(Assertions ar) 45 689.02 T
(en\325t imple-) 97.16 689.02 T
(mented yet.) 45 680.02 T
0 0 612 792 C
45 323.71 153 374.3 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 298.02 153 370.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(The syntax described in) 45 364.02 T
(this section might change) 45 355.02 T
(when pr) 45 346.02 T
(econditions and) 78.35 346.02 T
(postconditions ar) 45 337.02 T
(e imple-) 114 337.02 T
(mented.) 45 328.02 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "21" 18
%%Page: "20" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(6 Packages) 277.39 750.67 T
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(20) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(Confidential) 477.67 30.67 T
0 10 Q
(Packages\323 on page 20.\051 The oak.lang package is documented in the) 180 713.33 T
2 F
(FirstPerson) 477.9 713.33 T
(Pr) 180 701.33 T
(ogramming Interface) 189.82 701.33 T
0 F
( in the chapter \322The Language \050oak.lang\051 Package.\323) 274.17 701.33 T
1 F
(Implementation Note:) 180 677.33 T
0 F
(In the curr) 288 677.33 T
(ent implementation of Oak, packages ar) 334.25 677.33 T
(e) 510.3 677.33 T
(closely tied to the \336le system. Everything that\325s in a particular package is in one) 180 665.33 T
(dir) 180 653.33 T
(ectory) 192.79 653.33 T
(, and only one package can be in a particular dir) 219.14 653.33 T
(ectory) 431.31 653.33 T
(. The name of a) 457.66 653.33 T
(package indicates its dir) 180 641.33 T
(ectory) 286.54 641.33 T
(. For example, a package named) 312.89 641.33 T
5 F
-0.5 (oak.lang) 457.26 641.33 S
0 F
( would) 501.26 641.33 T
(be in a dir) 180 629.33 T
(ectory) 224.34 629.33 T
5 F
-0.5 (lang) 254.3 629.33 S
0 F
( under a dir) 276.3 629.33 T
(ectory named) 328.29 629.33 T
5 F
-0.5 (oak) 391.3 629.33 S
0 F
( . The) 407.8 629.33 T
5 F
-0.5 (oak/lang) 434.54 629.33 S
0 F
( dir) 478.54 629.33 T
(ectory) 493.83 629.33 T
(could be anywher) 180 617.33 T
(e in the \336le system. The Oak r) 259.37 617.33 T
(untime system looks for it in the) 390.46 617.33 T
(dir) 180 605.33 T
(ectories speci\336ed by the CLASSP) 192.79 605.33 T
(A) 337.53 605.33 T
(TH envir) 344.57 605.33 T
(onment variable.) 384.46 605.33 T
( 6.1) 144 569.33 T
4 F
(Specifying a Compilation Unit\325) 180 569.33 T
(s Package) 312.14 569.33 T
0 F
(The package that a compilation unit is in is speci\336ed by a) 180 547.33 T
1 F
(package) 434.93 547.33 T
0 F
( statement. It) 472.15 547.33 T
(has the following format:) 180 535.33 T
5 9 Q
(package) 198 513 T
8 F
(packageName) 241.2 513 T
5 F
(;) 300.6 513 T
0 10 Q
-0.18 (When a compilation unit has no) 180 491.33 P
1 F
-0.18 (package) 322.71 491.33 P
0 F
-0.18 ( statement, the unit is placed in a default) 359.93 491.33 P
(package, which has no name.) 180 479.33 T
(A compilation unit automatically imports every class and interface in its own) 180 455.33 T
(package.) 180 443.33 T
( 6.2) 144 407.33 T
4 F
(Using Classes and Interfaces fr) 180 407.33 T
(om Other Packages) 312.03 407.33 T
0 F
-0.33 (Code in one package can specify classes or interfaces fr) 180 385.33 P
-0.33 (om another package in one) 419.59 385.33 P
(of two ways:) 180 373.33 T
(\245) 189 355.33 T
(By pr) 207 355.33 T
(efacing each r) 230.95 355.33 T
(efer) 291.62 355.33 T
(ence to the class or interface name with the name of) 308.3 355.33 T
(its package) 207 343.33 T
5 9 Q
(// prefacing with a package) 198 321 T
(myCo.aGroup.AClass o=new myCo.aGroup.AClass\050\051;) 198 312 T
0 10 Q
(\245) 189 288.33 T
(By importing the class or interface or the package that contains it, using an) 207 288.33 T
1 F
-0.41 (import) 207 276.33 P
0 F
-0.41 ( statement. Importing a class or interface makes the name of the class) 238.11 276.33 P
-0.27 (or interface available in the curr) 207 264.33 P
-0.27 (ent namespace. Importing a package makes) 346.36 264.33 P
(the names of all of its public classes and interfaces available.) 207 252.33 T
5 9 Q
(// importing just a class) 198 230 T
(import myCo.aGroup.AClass;) 198 221 T
(AClass o=new AClass\050\051;) 198 212 T
(// importing an entire package) 198 192 T
(import myCo.aGroup.*;) 198 183 T
(AClass o=new AClass\050\051;) 198 174 T
0 0 0 1 0 0 0 K
45 165.02 153 198.86 C
0 0 0 1 0 0 0 K
45 122.02 153 194.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(The syntax for importing) 45 188.02 T
(packages is likely to) 45 179.02 T
(change.) 45 170.02 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 19
%%Page: "19" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(19) 514 30.67 T
(6 Packages) 277.39 750.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
0 10 Q
-0.12 (the pr) 180 713.33 P
-0.12 (ogrammer specify that an object must) 206.03 713.33 P
-0.12 ( implement a given interface, without) 371.95 713.33 P
(having to know) 180 701.33 T
( the exact type or inheritance of that object. Using interfaces) 249.66 701.33 T
(makes it unnecessary to for) 180 689.33 T
(ce r) 300.55 689.33 T
(elated classes to shar) 316.05 689.33 T
(e a common abstract) 407.82 689.33 T
(super) 180 677.33 T
(class or to add methods to Object just to guarantee that many classes) 204.84 677.33 T
(implement the same methods.) 180 665.33 T
5 9 Q
(class StorageManager {) 198 643 T
(    Stream stream;) 198 634 T
(    ...) 198 625 T
(    void pickle\050Storing obj\051 {) 198 616 T
(        obj.freezeDry\050stream\051;) 198 607 T
(    }) 198 598 T
(}) 198 589 T
0 10 Q
( 5.2) 144 555.33 T
4 F
(Constants in Interfaces) 180 555.33 T
0 F
(Besides methods, interfaces can also declar) 180 533.33 T
(e constants. The value of the constant) 369.12 533.33 T
(must be set in the interface. For example:) 180 521.33 T
5 9 Q
(interface InterfaceName {) 198 499 T
(    const int aConstant = 42;) 198 490 T
(    . . .) 198 481 T
(}) 198 472 T
0 10 Q
(Code can r) 180 450.33 T
(efer to the interface constants as if they wer) 227.48 450.33 T
(e declar) 418.57 450.33 T
(ed as class \050) 452.88 450.33 T
1 F
(static) 504.68 450.33 T
0 F
(\051) 528.55 450.33 T
(variables in the implementing class. When Oak detects a class implementing two) 180 438.33 T
(or mor) 180 426.33 T
(e interfaces that declar) 209.97 426.33 T
(e constants with the same name, an err) 309.15 426.33 T
(or r) 480.31 426.33 T
(esults.) 495.99 426.33 T
(One way to avoid the possibility of this err) 180 414.33 T
(or is to specify the interface name) 368.56 414.33 T
(befor) 180 402.33 T
(e every use of the constant, whether in the implementing class or in clients:) 202.88 402.33 T
5 9 Q
(InterfaceName.aConstant) 198 380 T
(o.aConstant        // where o is declared as "InterfaceName o;") 198 371 T
0 10 Q
( 5.3) 144 337.33 T
4 F
(Combining Interfaces) 180 337.33 T
0 F
(Interfaces can incorporate one or mor) 180 315.33 T
(e other interfaces, using the) 345.34 315.33 T
1 F
(extends) 469.37 315.33 T
0 F
(keywor) 180 303.33 T
(d as follows:) 213.48 303.33 T
5 9 Q
(interface DoesItAll extends Storing, Painting {) 198 281 T
(    void doesSomethingElse\050\051 = 0;) 198 272 T
(}) 198 263 T
0 14 Q
(6) 144 210.67 T
6 F
(Packages) 180 210.67 T
0 10 Q
-0.37 (Packages ar) 180 185.33 P
-0.37 (e gr) 231.53 185.33 P
-0.37 (oups of classes and interfaces. They ar) 247.77 185.33 P
-0.37 (e a tool for managing a lar) 413.96 185.33 P
-0.37 (ge) 527.52 185.33 P
-0.04 (namespace and avoiding con\337icts. Every class and interface name is contained in) 180 173.33 P
-0.02 (some package. \050See \322Classes\323 on page 10 and \322Access to V) 180 161.33 P
-0.02 (ariables and Methods\323) 437.16 161.33 P
(on page 15 for information on how packages af) 180 149.33 T
(fect the namespace.\051 By) 387.78 149.33 T
(convention, package names consist of period-separated wor) 180 137.33 T
(ds, with the \336rst) 444.41 137.33 T
(name r) 180 125.33 T
(epr) 210.71 125.33 T
(esenting the or) 225.28 125.33 T
(ganization that developed the package.) 290.57 125.33 T
(The oak.lang package contains classes and interfaces that ar) 180 101.33 T
(e integral to the Oak) 443.29 101.33 T
(language.) 180 89.33 T
(All Oak pr) 225.67 89.33 T
(ograms automatically import the contents of the oak.lang) 272.47 89.33 T
(package. \050Importing is discussed in \322Using Classes and Interfaces fr) 180 77.33 T
(om Other) 479.69 77.33 T
FMENDPAGE
%%EndPage: "19" 20
%%Page: "18" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(5 Interfaces) 276.44 750.67 T
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(18) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(Confidential) 477.67 30.67 T
5 9 Q
(class A {) 198 714 T
(    void a\050\051 { f.set\05042\051; }) 198 705 T
(    B f;) 198 696 T
(}) 198 687 T
(class B {) 198 667 T
(    void set\050long n\051 { N = n; }) 198 658 T
(    long N;) 198 649 T
(}) 198 640 T
0 14 Q
(5) 144 587.67 T
6 F
(Interfaces) 180 587.67 T
0 10 Q
-0.12 (An interface speci\336es a collection of methods without implementing their bodies.) 180 562.33 P
(Interfaces pr) 180 550.33 T
(ovide encapsulation of method pr) 235.27 550.33 T
(otocols without r) 384.72 550.33 T
(estricting the) 459.8 550.33 T
(implementation to one inheritance tr) 180 538.33 T
(ee. When a class implements an interface, it) 341.93 538.33 T
-0.42 (generally must implement the bodies of all the methods described in the interface.) 180 526.33 P
-0.07 (\050The exception is that if the implementing class is) 180 514.33 P
2 F
-0.07 (abstract) 399.58 514.33 P
0 F
-0.07 (\321never instantiated\321it) 431.6 514.33 P
(can leave the implementation of some or all interface methods to its subclasses.\051) 180 502.33 T
(Interfaces solve some of the same pr) 180 478.33 T
(oblems that multiple inheritance does) 339.66 478.33 T
(without as much over) 180 466.33 T
(head at r) 276.61 466.33 T
(untime. However) 315.46 466.33 T
(, because interfaces involve) 392.66 466.33 T
(dynamic method binding, ther) 180 454.33 T
(e is often a small performance penalty to using) 315.24 454.33 T
(them.) 180 442.33 T
(Using interfaces allows several classes to shar) 180 418.33 T
(e a pr) 381.44 418.33 T
(ogramming interface without) 406.01 418.33 T
(having to be fully awar) 180 406.33 T
(e of each other) 282.65 406.33 T
(\325s implementation. The following example) 347.8 406.33 T
(shows an interface declaration \050with the) 180 394.33 T
1 F
(interface) 359.39 394.33 T
0 F
( keywor) 399.38 394.33 T
(d\051 and a class that) 435.36 394.33 T
(implements the interface.) 180 382.33 T
5 9 Q
(public interface Storing {) 198 360 T
(    void freezeDry\050Stream s\051 = 0;) 198 351 T
(    void reconstitute\050Stream s\051 = 0;) 198 342 T
(}) 198 333 T
(public class Raster implements Storing, Painting {) 198 313 T
(    ...) 198 304 T
(    void freezeDry\050Stream s\051 {) 198 295 T
8 F
(/* JPEG compress image before storing */) 241.2 286 T
5 F
(        ...) 198 277 T
(    }) 198 268 T
(    void reconstitute \050stream s\051 {) 198 239 T
8 F
(/* JPEG decompress image before reading */) 241.2 230 T
5 F
(        ...) 198 221 T
(    }) 198 212 T
(}) 198 203 T
0 10 Q
(Like classes, interfaces ar) 180 181.33 T
(e either private \050the default\051 or public. The scope of) 290.53 181.33 T
(public and private interfaces is the same as that of public and private classes,) 180 169.33 T
(r) 180 157.33 T
(espectively) 183.77 157.33 T
(. As for classes, the) 232.01 157.33 T
1 F
(public) 318 157.33 T
0 F
( and) 347.43 157.33 T
1 F
(private) 369.36 157.33 T
0 F
( keywor) 401.58 157.33 T
(ds specify whether an) 437.56 157.33 T
(interface is public or private.) 180 145.33 T
( 5.1) 144 109.33 T
4 F
(Interfaces as T) 180 109.33 T
(ypes) 242.58 109.33 T
0 F
(The declaration syntax) 180 87.33 T
2 F
(interfaceName) 282.93 87.33 T
(variableName) 343.95 87.33 T
0 F
( declar) 399.69 87.33 T
(es a variable or) 429.21 87.33 T
-0.17 (parameter to be an instance of some class that implements) 180 75.33 P
2 F
-0.17 (interfaceName) 437.69 75.33 P
0 F
-0.17 (. This lets) 496.21 75.33 P
45 328.67 144 368.54 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 248.68 144 365.68 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(In the futur) 45 359.68 T
(e, the \322=0\323) 90.43 359.68 T
(part of declaring meth-) 45 350.68 T
(ods in interfaces may go) 45 341.68 T
(away) 45 332.68 T
(.) 65.51 332.68 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "18" 21
%%Page: "17" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(17) 514 30.67 T
(4 Classes) 280.64 750.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
5 9 Q
(class MyClass {) 198 714 T
(. . .) 198 705 T
(    MyClass\050) 198 696 T
8 F
(someParameters) 262.8 696 T
5 F
(\051 {) 338.4 696 T
(        /* Call immediate superclass constructor */) 198 687 T
(        super\050) 198 678 T
8 F
(otherParameters) 273.6 678 T
5 F
(\051;) 354.6 678 T
(        . . .) 198 669 T
(    }) 198 660 T
(. . .) 198 651 T
(}) 198 642 T
0 10 Q
-0.18 (Invoking a constr) 180 620.33 P
-0.18 (uctor in the curr) 256.88 620.33 P
-0.18 (ent class is done as shown in the following code) 327.76 620.33 P
(example.) 180 608.33 T
5 9 Q
(class MyClass {) 198 586 T
(. . .) 198 577 T
(    MyClass\050) 198 568 T
8 F
(someParameters) 262.8 568 T
5 F
(\051 {) 338.4 568 T
(         . . .) 198 559 T
(    }) 198 550 T
(    MyClass\050) 198 541 T
8 F
(otherParameters) 262.8 541 T
5 F
(\051 {) 343.8 541 T
(        /* Call the constructor in this class that has the) 198 532 T
(           specif) 198 523 T
(ied parameter list. */) 289.8 523 T
(        this\050) 198 514 T
8 F
(someParameters) 268.2 514 T
5 F
(\051;) 343.8 514 T
(        . . .) 198 505 T
(    }) 198 496 T
(. . .) 198 487 T
(}) 198 478 T
0 10 Q
(The Foo and FooSub methods below ar) 180 456.33 T
(e examples of constr) 352.75 456.33 T
(uctors.) 442.65 456.33 T
5 9 Q
(class Foo extends Bar {) 198 434 T
(    int a;) 198 425 T
(    Foo\050int anInt\051 {) 198 416 T
(        // implicit call to Bar\050\051) 198 407 T
(        a = anInt;) 198 398 T
(    }) 198 389 T
(    Foo\050\051 {) 198 380 T
(        this\05042\051;        // calls Foo\05042\051 instead of Bar\050\051) 198 371 T
(    }) 198 362 T
(}) 198 353 T
(class FooSub extends Foo {) 198 333 T
(    int b;) 198 324 T
(    FooSub\050int anInt\051 {) 198 315 T
(        super\05013\051;    // calls Foo\05013\051; without this line,) 198 306 T
(                      // would have called Foo\050\051) 198 297 T
(        b = anInt;) 198 288 T
(    }) 198 279 T
(}) 198 270 T
0 10 Q
-0.31 (If a class declar) 180 248.33 P
-0.31 (es no constr) 246.13 248.33 P
-0.31 (uctors, the compiler automatically generates one of the) 297.91 248.33 P
(following form:) 180 236.33 T
8 9 Q
(ClassName) 198 214 T
5 F
(\050\051 {) 246.6 214 T
(    super\050\051;) 198 205 T
(}) 198 196 T
0 10 Q
( 4.13) 144 162.33 T
4 F
(Order of Declarations) 180 162.33 T
0 F
-0.15 (The or) 180 140.33 P
-0.15 (der of declaration of classes and the methods and instance variables within) 208.32 140.33 P
-0.08 (them is irr) 180 128.33 P
-0.08 (elevant. Methods ar) 225.33 128.33 P
-0.08 (e fr) 312.81 128.33 P
-0.08 (ee to make forwar) 327.12 128.33 P
-0.08 (d r) 406.73 128.33 P
-0.08 (efer) 419.03 128.33 P
-0.08 (ences to other methods) 435.71 128.33 P
(and instance variables. The following works:) 180 116.33 T
FMENDPAGE
%%EndPage: "17" 22
%%Page: "16" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(4 Classes) 280.64 750.67 T
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(16) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(Confidential) 477.67 30.67 T
5 9 Q
(synchronized) 198 714 T
8 F
([other access specif) 268.2 714 T
(iers]* <return type>) 376.2 714 T
(<method name>) 241.2 705 T
5 F
(\050) 316.8 705 T
8 F
(<parameter list>) 322.2 705 T
5 F
(\051 {) 408.6 705 T
8 F
(/* implementation */) 219.6 696 T
5 F
(}) 198 687 T
0 10 Q
(Synchr) 180 665.33 T
(onized blocks ar) 210.66 665.33 T
(e declar) 282.66 665.33 T
(ed as follows:) 316.97 665.33 T
8 9 Q
(/* ...preceding code in the method... */) 198 643 T
5 F
(synchronize\050) 198 634 T
8 F
(<object or class name>) 262.8 634 T
5 F
(\051 {   //sync. block) 381.6 634 T
8 F
(/* code that requires synchronized access */) 219.6 625 T
5 F
(}) 198 616 T
8 F
(/* ...remaining code in the method... */) 198 607 T
0 10 Q
(When a synchr) 180 576.33 T
(onized method is invoked, it waits until it can acquir) 246.08 576.33 T
(e the lock for) 478.92 576.33 T
(the curr) 180 564.33 T
(ent instance \050or class, if it\325s a class method\051. After acquiring the lock, it) 214.56 564.33 T
(executes its code and then r) 180 552.33 T
(eleases the lock.) 301.6 552.33 T
(Synchr) 180 528.33 T
(onized blocks of code behave similarly) 210.66 528.33 T
(, except that instead of using the) 380.67 528.33 T
(lock for the curr) 180 516.33 T
(ent instance or class, they use the lock associated with the object) 250.67 516.33 T
(or class speci\336ed in the block\325s) 180 504.33 T
1 F
(synchronize) 318.1 504.33 T
0 F
( statement.) 373.65 504.33 T
(For mor) 180 480.33 T
(e information on blocks of code r) 215.53 480.33 T
(unning simultaneously) 360.95 480.33 T
(, see the Thread) 463.4 480.33 T
(class documentation in the) 180 468.33 T
2 F
(FirstPerson Pr) 300.62 468.33 T
(ogramming Interface) 360.17 468.33 T
0 F
(.) 444.52 468.33 T
( 4.12) 144 432.33 T
4 F
(Constructors) 180 432.33 T
0 F
(Constr) 180 410.33 T
(uctors ar) 209.74 410.33 T
(e special methods pr) 248.39 410.33 T
(ovided for initialization. They ar) 339.27 410.33 T
(e) 482.69 410.33 T
(distinguished by having the same name as their class. Constr) 180 398.33 T
(uctors ar) 449.27 398.33 T
(e) 487.92 398.33 T
(automatically called upon the cr) 180 386.33 T
(eation of an object. They cannot be called) 322.13 386.33 T
(explicitly thr) 180 374.33 T
(ough an object. Constr) 236.21 374.33 T
(uctors do not have any r) 335.46 374.33 T
(eturn type.) 442.86 374.33 T
(Constr) 180 350.33 T
(uctors can be overloaded by varying the number and types of parameters,) 209.74 350.33 T
(just as any other method can be overloaded.) 180 338.33 T
5 9 Q
(Class Foo {) 198 316 T
(    int x;) 198 307 T
(    f) 198 298 T
(loat y;) 225 298 T
(    Foo\050\051 { x=0; y=0.0; }) 198 289 T
(    Foo\050int a\051 { x=a; y=0.0; }) 198 280 T
(    Foo\050f) 198 271 T
(loat a\051 { x=0; y=a; }) 246.6 271 T
(    Foo\050int a, f) 198 262 T
(loat b\051 { x=a; y=b; }) 284.4 262 T
(}) 198 253 T
(Foo obj1 = new Foo\050\051;          //calls Foo\050\051;) 198 233 T
(Foo obj2 = new Foo\0504\051;         //calls Foo\050int a\051;) 198 224 T
(Foo obj3 = new Foo\0504.0\051;       //calls Foo\050f) 198 215 T
(loat a\051;) 435.6 215 T
(Foo obj4 = new Foo\0504, 4.0\051;    //calls Foo\050int a, f) 198 206 T
(loat) 473.4 206 T
(b\051;) 500.4 206 T
0 10 Q
-0.23 (Befor) 180 184.33 P
-0.23 (e the constr) 203.46 184.33 P
-0.23 (uctor is called, storage for an instance is atomically allocated and) 253.75 184.33 P
(initialized to be a copy of the pr) 180 172.33 T
(ototype for the class.) 319.98 172.33 T
(The instance variables of super) 180 148.33 T
(classes ar) 316.63 148.33 T
(e initialized by calling either a) 357.76 148.33 T
(constr) 180 136.33 T
(uctor for the immediate super) 207.09 136.33 T
(class or a constr) 339.11 136.33 T
(uctor for the curr) 408.94 136.33 T
(ent class. If) 484.38 136.33 T
(neither is speci\336ed in the code, the super) 180 124.33 T
(class constr) 359.94 124.33 T
(uctor that has no parameters) 410.36 124.33 T
(is invoked. Calling a constr) 180 112.33 T
(uctor must be the \336rst thing in the method body;) 300.24 112.33 T
(calling a constr) 180 100.33 T
(uctor later is illegal.) 246.64 100.33 T
(Invoking a constr) 180 76.33 T
(uctor of the immediate super) 257.24 76.33 T
(class is done as follows:) 385.31 76.33 T
0 0 0 1 0 0 0 K
45 607 153 682.43 C
0 0 0 1 0 0 0 K
45 607.68 153 679.68 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(Curr) 45 673.68 T
(ently) 63.76 673.68 T
(, you must use) 82.86 673.68 T
1 F
(synchronize) 45 664.68 T
0 F
( \050no \322d\323\051 in-) 95 664.68 T
(stead of) 45 655.68 T
1 F
(synchronized) 78.47 655.68 T
0 F
(when declaring synchr) 45 646.68 T
(o-) 135.82 646.68 T
(nized blocks. Synchr) 45 637.68 T
(o-) 126.84 637.68 T
(nized blocks based on) 45 628.68 T
(classes \050as opposed to ob-) 45 619.68 T
(jects\051 curr) 45 610.68 T
(ently don\325t work.) 83.78 610.68 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 23
%%Page: "15" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(15) 514 30.67 T
(4 Classes) 280.64 750.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
0 10 Q
( 4.8) 144 713.33 T
4 F
(T) 180 713.33 T
(ransient V) 185.93 713.33 T
(ariables) 229.73 713.33 T
0 F
(V) 180 691.33 T
(ariables marked) 186.3 691.33 T
1 F
(transient) 259.87 691.33 T
0 F
( ar) 300.41 691.33 T
(e tr) 311.68 691.33 T
(eated specially when instances of the class ar) 326 691.33 T
(e) 523.77 691.33 T
(written out as persistent objects.) 180 679.33 T
(Speci\336cally) 324.65 679.33 T
(, the values of transient variables ar) 373.81 679.33 T
(e) 530.39 679.33 T
-0.32 (not written out. When the persistent object is r) 180 667.33 P
-0.32 (econstituted, transient variables ar) 381.84 667.33 P
-0.32 (e) 533.03 667.33 P
(initialized to zer) 180 655.33 T
(o.) 251.81 655.33 T
( 4.9) 144 619.33 T
4 F
(Final Classes and Methods) 180 619.33 T
0 F
(The) 180 597.33 T
1 F
(\336nal) 199.24 597.33 T
0 F
( keywor) 219.79 597.33 T
(d is an access speci\336er that marks a class as never having) 255.77 597.33 T
(subclasses, or a method as never being overridden. Using) 180 585.33 T
1 F
(\336nal) 436.54 585.33 T
0 F
( lets the compiler) 457.09 585.33 T
(perform a variety of optimizations. One such optimization is inline expansion of) 180 573.33 T
(method bodies, which is done for small, \336nal methods \050wher) 180 561.33 T
(e the meaning of) 448.44 561.33 T
2 F
(small) 180 549.33 T
0 F
( is implementation dependent\051.) 201.67 549.33 T
( 4.10) 144 513.33 T
4 F
(Access to V) 180 513.33 T
(ariables and Methods) 227.95 513.33 T
0 F
(Each variable or method declar) 180 491.33 T
(ed in a class has one of the following types of) 317.81 491.33 T
(access:) 180 479.33 T
1 F
(public) 212.15 479.33 T
0 F
(,) 241.58 479.33 T
1 F
(protected) 246.58 479.33 T
0 F
(, or) 289.35 479.33 T
1 F
(private) 306.26 479.33 T
0 F
(. These access types af) 338.48 479.33 T
(fect whether the) 435.91 479.33 T
(variable or method can be used by other classes.) 180 467.33 T
1 F
(Note:) 180 443.33 T
0 F
( All classes in a particular package can use all variables and methods) 204.72 443.33 T
(declar) 180 431.33 T
(ed in the classes in that package, r) 207.02 431.33 T
(egar) 356.58 431.33 T
(dless of) 375.7 431.33 T
1 F
(public) 411.78 431.33 T
0 F
(,) 441.21 431.33 T
1 F
(protected) 446.21 431.33 T
0 F
(, and) 488.98 431.33 T
1 F
(private) 180 419.33 T
0 F
( declarations \050see \322Packages\323 on page 19\051.) 212.22 419.33 T
(By default all variables and methods in a class \050including constr) 180 395.33 T
(uctors\051 ar) 461.83 395.33 T
(e) 503.81 395.33 T
1 F
-0.22 (private) 180 383.33 P
0 F
-0.22 (.) 212.22 383.33 P
-0.22 (Private variables and methods can be accessed only by methods declar) 217 383.33 P
-0.22 (ed) 526.82 383.33 P
-0.17 (in the class, and not by its subclasses or any other classes \050except for classes in the) 180 371.33 P
(same package\051. Public variables and methods\321those declar) 180 359.33 T
(ed with the) 443.92 359.33 T
1 F
(public) 496.52 359.33 T
0 F
(type modifier\321) 180 347.33 T
(can be accessed by anyone) 250.41 347.33 T
(.) 367.58 347.33 T
( The) 370.08 347.33 T
1 F
(protected) 391.82 347.33 T
0 F
( type modi\336er makes a) 434.59 347.33 T
(variable or method accessible to subclasses, but not to any other classes \050except) 180 335.33 T
(those in the same package\051.) 180 323.33 T
(The following example shows how to specify access.) 180 299.33 T
5 9 Q
(class Stuff {) 198 277 T
(    int i;                    /* private by default */) 198 268 T
(    public int j;             /* visible to everyone */) 198 259 T
(    protected int k;          /* subclasses see this */) 198 250 T
(    void method1\050\051 { }        /* private by default */) 198 241 T
(    public void method2\050\051 { } /* public */) 198 232 T
(    protected static void method3\050\051 { } /* protected */) 198 223 T
(};) 198 214 T
0 10 Q
( 4.1) 144 180.33 T
(1) 158.45 180.33 T
4 F
(Synchr) 180 180.33 T
(onized Methods and Blocks) 210.38 180.33 T
0 F
-0.11 (The) 180 158.33 P
1 F
-0.11 (synchronized) 199.13 158.33 P
0 F
-0.11 ( keywor) 260.79 158.33 P
-0.11 (d is an access speci\336er that marks a method or block of) 296.65 158.33 P
-0.27 (code as being r) 180 146.33 P
-0.27 (equir) 245.11 146.33 P
-0.27 (ed to acquir) 268.21 146.33 P
-0.27 (e a lock, so that it does not r) 320.04 146.33 P
-0.27 (un at the same time as) 440.75 146.33 P
(other code that needs access to the same r) 180 134.33 T
(esour) 363.54 134.33 T
(ce. \050The other code must also be) 387.83 134.33 T
(marked) 180 122.33 T
1 F
(synchronized) 216.74 122.33 T
0 F
(.\051 Each object has exactly one lock associated with it; each) 278.4 122.33 T
(class also has exactly one lock.) 180 110.33 T
(Synchr) 180 86.33 T
(onized methods ar) 210.66 86.33 T
(e declar) 293.03 86.33 T
(ed as follows:) 327.34 86.33 T
45 412 144 451.16 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 332.02 144 449.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(The r) 45 443.02 T
(ules for access to) 65.8 443.02 T
(classes and interfaces in) 45 434.02 T
(the same package might) 45 425.02 T
(change.) 45 416.02 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "15" 24
%%Page: "14" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(4 Classes) 280.64 750.67 T
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(14) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(Confidential) 477.67 30.67 T
5 9 Q
(class Ahem {) 198 714 T
(    int i;                             // Instance variable) 198 705 T
(    static int j;                      // Class variable) 198 696 T
(    void seti\050int I\051 { i = I; }        // Instance method) 198 687 T
(    static void setj\050int J\051 { j = J; } // Class method) 198 678 T
(};) 198 669 T
(Ahem a = new Ahem\050\051;) 198 651 T
(Ahem.j = 2;     /* valid; class var via class */) 198 642 T
(a.j = 3;        /* valid; class var via instance */) 198 633 T
(Ahem.setj\0502\051;   /* valid; class method via class */) 198 624 T
(a.setj\0503\051;      /* valid; class method via instance */) 198 615 T
(a.i = 4;        /* valid; instance var via instance */) 198 606 T
(Ahem.i = 5;     /* ERROR; instance var via class */) 198 597 T
(a.seti\0504\051;      /* valid; instance method via instance */) 198 588 T
(Ahem.seti\0505\051;   /* ERROR; instance method via class */) 198 579 T
0 10 Q
(A class variable exists only once per addr) 180 557.33 T
(ess space, no matter how many) 362.45 557.33 T
(instances of the class exist in that addr) 180 545.33 T
(ess space. For distributed applications that) 348.93 545.33 T
-0.28 (r) 180 533.33 P
-0.28 (un in multiple addr) 183.87 533.33 P
-0.28 (ess spaces, each addr) 269.75 533.33 P
-0.28 (ess space has one occurr) 361.94 533.33 P
-0.28 (ence of the class) 467.79 533.33 P
(variable. When you r) 180 521.33 T
(efer to a class variable r) 272.99 521.33 T
(elative to some object \050for example,) 376.41 521.33 T
5 F
-0.5 (obj.aVar) 180 509.33 S
0 F
(\051 the class variable) 224 509.33 T
5 F
-0.5 (aVar) 307.77 509.33 S
0 F
( is fetched fr) 329.77 509.33 T
(om the addr) 384.06 509.33 T
(ess space wher) 438.21 509.33 T
(e) 503.68 509.33 T
5 F
-0.5 (obj) 510.97 509.33 S
0 F
(r) 180 497.33 T
(esides. See \322Synchr) 183.77 497.33 T
(onized Methods and Blocks\323 on page 15 for information on) 268.84 497.33 T
(achieving synchr) 180 485.33 T
(onized access to class variables.) 255.05 485.33 T
(Class variables can have initializers, just as instance variables can. These) 180 461.33 T
(initializers ar) 180 449.33 T
(e executed just befor) 237.88 449.33 T
(e the \336rst r) 328.29 449.33 T
(untime use of the class, befor) 375.82 449.33 T
(e any) 503.89 449.33 T
-0.36 (instances ar) 180 437.33 P
-0.36 (e cr) 231.43 437.33 P
-0.36 (eated. Y) 246.56 437.33 P
-0.36 (ou can also add a code fragment to be executed at the same) 280.9 437.33 P
(time the class variables ar) 180 425.33 T
(e initialized, as shown in the following example.) 293.24 425.33 T
5 9 Q
(class A {) 198 403 T
(    static int arr[12];) 198 394 T
(    static {    /* code fragment: initialize the array */) 198 385 T
(        int i;) 198 376 T
(        for \050i = 0; i<arr.length; i++\051) 198 367 T
(            arr[i] = i;) 198 358 T
(    }) 198 349 T
(}) 198 340 T
0 10 Q
-0.23 (Class methods cannot r) 180 318.33 P
-0.23 (efer to instance variables; they can only use class variables.) 282.38 318.33 P
( 4.6) 144 282.33 T
4 F
(Constants) 180 282.33 T
0 F
-0.16 (Instance and class variables can be marked) 180 260.33 P
1 F
-0.16 (const) 370.71 260.33 P
0 F
-0.16 ( to indicate that, once initialized,) 394.59 260.33 P
(their value never changes.) 180 248.33 T
( 4.7) 144 212.33 T
4 F
(V) 180 212.33 T
(olatile V) 186.3 212.33 T
(ariables) 221.21 212.33 T
0 F
(Instance and class variables can be marked) 180 190.33 T
1 F
(volatile) 371.8 190.33 T
0 F
( so that the compiler tr) 406.24 190.33 T
(eats) 505.98 190.33 T
(them specially during optimization. The values of volatile variables ar) 180 178.33 T
(e never) 489.47 178.33 T
(cached in r) 180 166.33 T
(egisters and ar) 228.1 166.33 T
(e always r) 292.54 166.33 T
(e-r) 337.15 166.33 T
(ead when r) 349.04 166.33 T
(efer) 398.48 166.33 T
(enced. V) 415.16 166.33 T
(ariables should be) 452.41 166.33 T
(marked) 180 154.33 T
1 F
(volatile) 216.74 154.33 T
0 F
( when they might be changed by means undetectable by the) 251.18 154.33 T
(compiler) 180 142.33 T
(, such as by another thr) 218.56 142.33 T
(ead or device.) 321.37 142.33 T
FMENDPAGE
%%EndPage: "14" 25
%%Page: "13" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(13) 514 30.67 T
(4 Classes) 280.64 750.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
0 10 Q
( 4.3) 144 713.33 T
4 F
(Overriding and Overloading Methods) 180 713.33 T
0 F
(The Oak language allows) 180 691.33 T
2 F
(polymorphic) 294.69 691.33 T
0 F
( method naming\321declaring a method with) 344.87 691.33 T
(a name that has alr) 180 679.33 T
(eady been used in the class or its super) 263.52 679.33 T
(class\321for overriding) 435.17 679.33 T
(and overloading methods.) 180 667.33 T
2 F
(Overriding) 299.06 667.33 T
0 F
( means pr) 344.63 667.33 T
(oviding a dif) 388.09 667.33 T
(fer) 444.68 667.33 T
(ent) 456.57 667.33 T
(implementation of an inherited method.) 180 655.33 T
2 F
(Overloading) 359.84 655.33 T
0 F
( means declaring a method) 410.4 655.33 T
(that has the same name as another method, but a dif) 180 643.33 T
(fer) 410.67 643.33 T
(ent parameter list.) 422.56 643.33 T
1 F
(Note:) 180 619.33 T
0 F
( Return types ar) 204.72 619.33 T
(e not used to distinguish methods. W) 275.38 619.33 T
(ithin a class scope,) 439.87 619.33 T
(methods that have the same name and parameter list) 180 607.33 T
2 F
(must) 416.61 607.33 T
0 F
( return the same type.) 437.17 607.33 T
(T) 180 583.33 T
(o override a method, a subclass of the class that originally declar) 185.21 583.33 T
(ed the method) 470.02 583.33 T
(must declar) 180 571.33 T
(e a method with the same name, r) 231.88 571.33 T
(eturn type \050or a subclass\051, and) 381.21 571.33 T
(parameter list. When the method is invoked on an instance of the subclass, the) 180 559.33 T
(new method is called rather than the original method.) 180 547.33 T
(T) 180 523.33 T
(o overload a method, a class declar) 185.21 523.33 T
(es a method that has the same name and) 339.62 523.33 T
(r) 180 511.33 T
(eturn type as another method \050which has been declar) 183.77 511.33 T
(ed in the class or in one of) 418.52 511.33 T
(its super) 180 499.33 T
(classes\051, but a dif) 217.75 499.33 T
(fer) 292.93 499.33 T
(ent parameter list. The Oak r) 304.82 499.33 T
(untime system r) 431.62 499.33 T
(esolves) 502.95 499.33 T
(which method to call by matching the) 180 487.33 T
2 F
(actual parameter list) 349.68 487.33 T
0 F
( \050the parameter list) 432.63 487.33 T
(passed to the method\051 against the) 180 475.33 T
2 F
(formal parameter lists) 331.24 475.33 T
0 F
( of all methods with the) 419.57 475.33 T
(same name.) 180 463.33 T
5 9 Q
(class A {) 198 441 T
(    void Thermostat\050Foo f\051 {}) 198 432 T
(}) 198 423 T
(class B extends A {) 198 414 T
(    void Thermostat\050Foo f\051 {}    // override) 198 405 T
(    void Thermostat\050\051 {}         // overload) 198 396 T
(    int Thermostat\050\051 {}          // ERROR: Duplicate method) 198 387 T
(}) 198 378 T
0 10 Q
(When deciding which method to invoke, the r) 180 356.33 T
(untime system computes the) 383.33 356.33 T
-0.12 (number of conversions r) 180 344.33 P
-0.12 (equir) 287.44 344.33 P
-0.12 (ed to change the actual parameter list into the types) 310.54 344.33 P
(declar) 180 332.33 T
(ed in each method\325s formal parameter list. The method that r) 207.02 332.33 T
(equir) 475.99 332.33 T
(es the) 499.09 332.33 T
(fewest conversions is chosen. If ther) 180 320.33 T
(e is a tie, the method call is ambiguous and a) 338.59 320.33 T
(compilation err) 180 308.33 T
(or occurs.) 248.02 308.33 T
1 F
(Note:) 180 284.33 T
0 F
(The names of parameters ar) 207.22 284.33 T
(e not signi\336cant. Only the number) 330.02 284.33 T
(, type, and) 480.59 284.33 T
(or) 180 272.33 T
(der ar) 189.23 272.33 T
(e.) 215.35 272.33 T
( 4.4) 144 236.33 T
4 F
(Used befor) 180 236.33 T
(e Set) 226.2 236.33 T
0 F
(Methods ar) 180 214.33 T
(e rigor) 230.41 214.33 T
(ously checked to be sur) 259.35 214.33 T
(e that all) 362.58 214.33 T
2 F
(local variables) 403.03 214.33 T
0 F
( \050variables) 459.78 214.33 T
(declar) 180 202.33 T
(ed inside a method\051 ar) 207.02 202.33 T
(e set befor) 306.07 202.33 T
(e they ar) 351.03 202.33 T
(e r) 389.02 202.33 T
(efer) 400.08 202.33 T
(enced. Used-befor) 416.76 202.33 T
(e-set is a) 496.84 202.33 T
(fatal compilation err) 180 190.33 T
(or) 270.02 190.33 T
(.) 278.69 190.33 T
( 4.5) 144 154.33 T
4 F
(Class V) 180 154.33 T
(ariables and Methods) 211.58 154.33 T
0 F
(V) 180 132.33 T
(ariables and methods declar) 186.3 132.33 T
(ed in a class can be declar) 310.59 132.33 T
(ed) 423.65 132.33 T
1 F
(static) 437.05 132.33 T
0 F
(, which makes) 460.92 132.33 T
(them apply to the class itself, rather than to an instance of the class. As shown in) 180 120.33 T
(the following code example, both class variables and class methods ar) 180 108.33 T
(e accessed) 488.28 108.33 T
-0.41 (using the class name. For convenience, they can also be accessed using an instance) 180 96.33 P
(of the class.) 180 84.33 T
FMENDPAGE
%%EndPage: "13" 26
%%Page: "12" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(4 Classes) 280.64 750.67 T
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(12) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(Confidential) 477.67 30.67 T
5 9 Q
(void aMethod\050\051 {) 198 714 T
(    /* . . . */) 198 705 T
(     otherObject.Method\050this\051;) 198 696 T
(    /* . . . */) 198 687 T
(}) 198 678 T
0 10 Q
(Any time a method r) 180 656.33 T
(efers to its own instance variables or methods an implicit) 271.99 656.33 T
(\322) 180 644.33 T
5 F
-0.5 (this.) 185 644.33 S
0 F
(\323 is in fr) 212.5 644.33 T
(ont of each r) 247.98 644.33 T
(efer) 302.63 644.33 T
(ence:) 319.31 644.33 T
5 9 Q
(class Foo {) 198 622 T
(    int a, b, c;) 198 613 T
(    /* . . . */) 198 604 T
(    print\050a + "\134n"\051;     // a == "this.a") 198 595 T
(    /* . . . */) 198 586 T
(}) 198 577 T
0 10 Q
(Instance variables can\325t be hidden by being r) 180 555.33 T
(edeclar) 376.87 555.33 T
(ed in subclasses. Speci\336cally) 408.68 555.33 T
(,) 533.13 555.33 T
(if a class declar) 180 543.33 T
(es a public or pr) 246.59 543.33 T
(otected instance variable, that variable cannot be) 317.64 543.33 T
(r) 180 531.33 T
(edeclar) 183.77 531.33 T
(ed in any subclass, although it can be used by any subclass. \050See \322Access) 215.58 531.33 T
(to V) 180 519.33 T
(ariables and Methods\323 on page 15 for information on declaring variables) 197.52 519.33 T
-0.11 (public, pr) 180 507.33 P
-0.11 (otected, and private.\051 Private instance variables can be r) 222.5 507.33 P
-0.11 (edeclar) 467.8 507.33 P
-0.11 (ed, since) 499.61 507.33 P
(they ar) 180 495.33 T
(en\325t visible to subclasses.) 210.7 495.33 T
( 4.2) 144 459.33 T
4 F
(Methods) 180 459.33 T
0 F
(Methods ar) 180 437.33 T
(e the operations that can be performed on an object or class. They can) 230.41 437.33 T
(be declar) 180 425.33 T
(ed in either classes or interfaces, but they can be implemented only in) 219.84 425.33 T
-0.45 (classes. \050Note: All user) 180 413.33 P
-0.45 (-de\336ned operations in Oak ar) 278.59 413.33 P
-0.45 (e implemented with methods;) 406.62 413.33 P
(Oak has no functions.\051) 180 401.33 T
(A method declaration in a class has the following form:) 180 377.33 T
2 F
([accessSpeci\336ers] r) 180 353.33 T
(eturnT) 255.37 353.33 T
(ype) 282.79 353.33 T
(methodName) 299.18 353.33 T
5 F
-0.5 (\050) 355.01 353.33 S
2 F
( parameterList) 360.51 353.33 T
5 F
-0.5 (\051 {) 421.62 353.33 S
2 F
([methodBody]) 200 341.33 T
5 F
-0.5 (}) 180 329.33 S
0 F
(A method declaration in an interface has the following form:) 180 305.33 T
2 F
([accessSpeci\336ers] r) 180 281.33 T
(eturnT) 255.37 281.33 T
(ype) 282.79 281.33 T
(methodName) 299.18 281.33 T
5 F
-0.5 (\050) 355.01 281.33 S
2 F
( parameterList) 360.51 281.33 T
5 F
-0.5 (\051 = 0;) 421.62 281.33 S
0 F
(Methods:) 180 257.33 T
(\245) 189 239.33 T
(Have a r) 207 239.33 T
(eturn type unless they\325r) 244.53 239.33 T
(e constr) 349.51 239.33 T
(uctors, in which case they must) 383.89 239.33 T
-0.34 (have no r) 207 227.33 P
-0.34 (eturn type. If a non-constr) 247.63 227.33 P
-0.34 (uctor method does not r) 361.45 227.33 P
-0.34 (eturn any value,) 466.41 227.33 P
(it must have a) 207 215.33 T
1 F
(void) 271.79 215.33 T
0 F
( r) 292.35 215.33 T
(eturn type.) 298.62 215.33 T
(\245) 189 200.33 T
(Have a parameter list consisting of comma-separated pairs of types and) 207 200.33 T
(parameters. The parameter list should be empty if the method has no) 207 188.33 T
(parameters.) 207 176.33 T
(V) 180 152.33 T
(ariables declar) 186.3 152.33 T
(ed in methods \050) 250.15 152.33 T
2 F
(local variables) 319.12 152.33 T
0 F
(\051 can\325t hide other local variables or) 375.87 152.33 T
-0.07 (parameters. For example, if a method is implemented with a parameter named) 180 140.33 P
5 F
-0.16 -0.5 (i) 529.57 140.33 B
0 F
-0.07 (,) 535.07 140.33 P
(it\325s a compile-time err) 180 128.33 T
(or for the method to declar) 276.67 128.33 T
(e a variable named) 395.2 128.33 T
5 F
-0.5 (i) 481.28 128.33 S
0 F
(.) 486.78 128.33 T
45 100.86 171 168.14 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 100.86 171 168.14 R
7 X
0 0 0 1 0 0 0 K
V
45 99 169.99 165 R
V
0 9 Q
0 X
(In the Oak 0.2 r) 45 159 T
(elease, local) 105.97 159 T
(variables and parameters can\325t) 45 150 T
(hide instance variable names.) 45 141 T
(In the futur) 45 132 T
(e, this r) 90.43 132 T
(estriction) 119.49 132 T
-0.18 (will be eased; the compiler will) 45 123 P
(generate a warning instead of) 45 114 T
(an err) 45 105 T
(or) 68.25 105 T
(.) 76.05 105 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "12" 27
%%Page: "11" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(11) 514 30.67 T
(4 Classes) 280.64 750.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
0 10 Q
(conversion or) 180 713.33 T
2 F
(cast) 242.95 713.33 T
0 F
(. Casts fr) 258.68 713.33 T
(om a class to a subclass ar) 297.11 713.33 T
(e always checked to make) 411.35 713.33 T
-0.1 (sur) 180 701.33 P
-0.1 (e that the object is actually an instance of the subclass \050or one of its subclasses\051.) 194.04 701.33 P
(The Oak language supports single inheritance. Thr) 180 677.33 T
(ough a featur) 403.99 677.33 T
(e known as) 463.04 677.33 T
2 F
-0.36 (interfaces) 180 665.33 P
0 F
-0.36 (, it supports some featur) 218.52 665.33 P
-0.36 (es that in other languages ar) 324.45 665.33 P
-0.36 (e supported thr) 447.21 665.33 P
-0.36 (ough) 514.99 665.33 P
(multiple inheritance \050see \322Interfaces\323 on page 18\051. Instances of classes ar) 180 653.33 T
(e stor) 499.17 653.33 T
(ed) 523.19 653.33 T
-0.09 (in a garbage collected heap \050see \322Garbage Collection\323 on page 28\051; local variables) 180 641.33 P
(ar) 180 629.33 T
(e r) 188.77 629.33 T
(efer) 199.83 629.33 T
(ences to objects in the heap.) 216.51 629.33 T
(The immediate super) 180 605.33 T
(class of a class and the interfaces that the class implements) 274.01 605.33 T
(\050if any\051 ar) 180 593.33 T
(e indicated in the class declaration by the keywor) 223.05 593.33 T
(ds) 440.71 593.33 T
1 F
(extends) 453.56 593.33 T
0 F
( and) 488.55 593.33 T
1 F
(implements) 180 581.33 T
0 F
(, r) 234.43 581.33 T
(espectively:) 243.2 581.33 T
5 9 Q
(public class) 198 559 T
8 F
(Classname) 268.2 559 T
5 F
( extends) 316.8 559 T
8 F
(Superclassname) 365.4 559 T
5 F
(        implements) 198 550 T
8 F
(Interface1,) 300.6 550 T
(Interface2) 365.4 550 T
5 F
({) 424.8 550 T
(    /* . . . */) 198 541 T
(}) 198 532 T
0 10 Q
(Every class except the r) 180 510.33 T
(oot class has exactly one immediate super) 282.98 510.33 T
(class. Unlike in) 467.51 510.33 T
(C++, all Oak classes ar) 180 498.33 T
(e derived fr) 279.58 498.33 T
(om a single r) 330.78 498.33 T
(oot class: Object. If a class is) 387.57 498.33 T
(declar) 180 486.33 T
(ed without specifying an immediate super) 207.02 486.33 T
(class, Object is assumed. For) 394.16 486.33 T
(example, the following) 180 474.33 T
5 9 Q
(public class Point {) 198 452 T
(    f) 198 443 T
(loat x, y;) 225 443 T
(}) 198 434 T
0 10 Q
(is the same as) 180 412.33 T
5 9 Q
(public class Point extends Object {) 198 390 T
(    f) 198 381 T
(loat x, y;) 225 381 T
(}) 198 372 T
0 10 Q
(Classes ar) 180 350.33 T
(e either private \050the default\051 or public. Private classes ar) 223.78 350.33 T
(e invisible) 470.09 350.33 T
(outside of the package in which they\325r) 180 338.33 T
(e declar) 348.86 338.33 T
(ed. Public classes can be used) 383.17 338.33 T
(outside of their package.) 180 326.33 T
(Public classes can\325t be derived fr) 291.18 326.33 T
(om private classes. T) 434.43 326.33 T
(o) 525.36 326.33 T
(declar) 180 314.33 T
(e a class public \050or private\051, use the) 207.02 314.33 T
1 F
(public) 364.54 314.33 T
0 F
(\050or) 396.47 314.33 T
1 F
(private) 411.71 314.33 T
0 F
(\051 keywor) 443.93 314.33 T
(d.) 483.24 314.33 T
( 4.1) 144 278.33 T
4 F
(Instance V) 180 278.33 T
(ariables) 224.91 278.33 T
0 F
(Instance variables ar) 180 256.33 T
(e declar) 270.49 256.33 T
(ed just like local variables.) 304.8 256.33 T
(They can be of any type) 423.44 256.33 T
(and can have initializers. These initializers ar) 180 244.33 T
(e executed when the instance is) 378.71 244.33 T
(initialized. \050If an instance variable does not have an initializer) 180 232.33 T
(, it is initialized to) 451.25 232.33 T
(zer) 180 220.33 T
(o or) 193.56 220.33 T
(, for) 210.19 220.33 T
1 F
(boolean) 230.43 220.33 T
0 F
( variables, to) 267.1 220.33 T
5 F
-0.5 (false) 325.8 220.33 S
0 F
(.\051 An example of an initializer for an) 353.3 220.33 T
(instance variable named) 180 208.33 T
1 F
(j) 290.07 208.33 T
0 F
( follows.) 293.4 208.33 T
5 9 Q
(class A {) 198 186 T
(    int j = 23;) 198 177 T
(    /* . . . */) 198 168 T
(}) 198 159 T
0 10 Q
(Inside the scope) 180 144.33 T
(of an instance of a class, the name) 253.55 144.33 T
1 F
(this) 404.87 144.33 T
0 F
( represents) 422.08 144.33 T
(the) 472.92 144.33 T
(curr) 489.29 144.33 T
(ent) 507.48 144.33 T
(object. For example, an object may need to pass itself as an argument to another) 180 132.33 T
(object\325s method:) 180 120.33 T
45 226.01 171 263 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 226.01 171 263 R
7 X
0 0 0 1 0 0 0 K
V
45 210.01 169.99 263 R
V
0 0 612 792 C
FMENDPAGE
%%EndPage: "11" 28
%%Page: "10" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(4 Classes) 280.64 750.67 T
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(10) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(Confidential) 477.67 30.67 T
0 10 Q
( 3.4) 144 713.33 T
4 F
(Character T) 180 713.33 T
(ypes) 232.3 713.33 T
0 F
(The Oak language uses the Unicode character set thr) 180 691.33 T
(oughout. Consequently the) 412.1 691.33 T
1 F
(char) 180 679.33 T
0 F
( data type is de\336ned as a 16-bit unsigned integer) 199.44 679.33 T
(.) 412.64 679.33 T
( 3.5) 144 643.33 T
4 F
(Arrays) 180 643.33 T
0 F
-0.24 (The Oak language includes support for) 180 621.33 P
2 F
-0.24 (arrays) 354.36 621.33 P
0 F
-0.24 (\321sets of or) 379.92 621.33 P
-0.24 (der) 428.99 621.33 P
-0.24 (ed data items. Arrays) 443.66 621.33 P
(ar) 180 609.33 T
(e r) 188.77 609.33 T
(eferr) 199.83 609.33 T
(ed to and passed by r) 220.46 609.33 T
(efer) 314.76 609.33 T
(ence.) 331.44 609.33 T
(Subscripts ar) 180 585.33 T
(e checked to make sur) 237.13 585.33 T
(e they\325r) 334.81 585.33 T
(e valid:) 368.08 585.33 T
5 9 Q
(int a[10];) 198 563 T
(a[5] = 1;) 198 554 T
(a[11] = 2;/* ERROR */) 198 545 T
0 10 Q
(Array dimensions can be integer expr) 180 523.33 T
(essions:) 346.26 523.33 T
5 9 Q
(void doIt\050int n\051 {) 198 501 T
(    f) 198 492 T
(loat arr[n];) 225 492 T
(    ...) 198 483 T
(}) 198 474 T
0 10 Q
(The length of any array can be found by) 180 452.33 T
(using) 359.45 452.33 T
1 F
(.length) 386.51 452.33 T
0 F
(:) 418.45 452.33 T
5 9 Q
(int a[10][3];) 198 430 T
(print\050a.length + ", " + a[0].length + "\134n"\051;) 198 421 T
(10, 3) 198 401 T
0 10 Q
(Arrays ar) 180 379.33 T
(e allocated either wher) 221.75 379.33 T
(e they\325r) 322.16 379.33 T
(e declar) 355.43 379.33 T
(ed \050by specifying the dimensions) 389.74 379.33 T
(of the array when it is declar) 180 367.33 T
(ed, as shown above\051 or dynamically with the) 306.23 367.33 T
1 F
(new) 506.97 367.33 T
0 F
(keyword:) 180 355.33 T
5 9 Q
(int a[];) 198 333 T
(a = new int[10];) 198 324 T
(Raster foo[];) 198 315 T
(foo = new Raster[10];        //creates an array, but not the) 198 306 T
(                             //Raster objects in the array.) 198 297 T
(foo[1] = new Raster\050"blah.jpg"\051;) 198 288 T
0 14 Q
(4) 144 235.67 T
6 F
(Classes) 180 235.67 T
0 10 Q
-0.12 (Classes r) 180 210.33 P
-0.12 (epr) 218.66 210.33 P
-0.12 (esent the classical object oriented pr) 233.23 210.33 P
-0.12 (ogramming model. They support) 390.69 210.33 P
(data abstraction and implementations tied to data.) 180 198.33 T
(T) 180 174.33 T
(o make a new class, the pr) 185.21 174.33 T
(ogrammer must base it on an existing class. The new) 300.78 174.33 T
(class is said to be) 180 162.33 T
2 F
(derived) 257.78 162.33 T
0 F
( fr) 287.23 162.33 T
(om the existing class. The derived class is also called a) 296.83 162.33 T
2 F
(subclass) 180 150.33 T
0 F
( of the other) 213.15 150.33 T
(, which is known as a) 265.85 150.33 T
2 F
(super) 363.07 150.33 T
(class) 385.12 150.33 T
0 F
(. Class derivation is transitive:) 404.19 150.33 T
(if B is a subclass of A, and C is a subclass of B, then C is a subclass of A.) 180 138.33 T
-0.33 (If B is a subclass of A, then an instance of B can be used as an instance of A. In fact,) 180 114.33 P
(if ther) 180 102.33 T
(e is no ambiguity) 206.38 102.33 T
(, then no explicit cast is needed. If an instance of A needs) 282.69 102.33 T
(to be used as if it wer) 180 90.33 T
(e an instance of B, the pr) 273.76 90.33 T
(ogrammer can write a type) 381.7 90.33 T
45 650.86 153 699.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 652.02 153 697.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(Unicode is not implement-) 45 691.02 T
(ed yet.) 45 682.02 T
(Characters curr) 73.81 682.02 T
(ent-) 135.22 682.02 T
(ly have ASCII values,) 45 673.02 T
-0.31 (although they ar) 45 664.02 P
-0.31 (e stor) 110.14 664.02 P
-0.31 (ed in) 131.45 664.02 P
(16 bits) 45 655.02 T
2 F
(.) 70.6 655.02 T
0 0 612 792 C
45 386.95 153 429.54 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 345.68 153 426.68 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(The) 45 420.68 T
1 F
(print) 62.32 420.68 T
0 F
( operator is one) 82.81 420.68 T
(of a gr) 45 411.68 T
(oup of operators) 70.31 411.68 T
(whose functionality might) 45 402.68 T
(be moved into classes.) 45 393.68 T
0 0 612 792 C
45 293.67 153 341.54 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 266.68 153 338.68 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(Although arrays can be) 45 332.68 T
(cr) 45 323.68 T
(eated with) 52.39 323.68 T
1 F
(new) 96.74 323.68 T
0 F
(, just as) 113.41 323.68 T
(instances of classes ar) 45 314.68 T
(e cr) 130.9 314.68 T
(e-) 144.85 314.68 T
(ated, arrays ar) 45 305.68 T
(e not cur-) 101.82 305.68 T
(r) 45 296.68 T
(ently objects.) 48.39 296.68 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "10" 29
%%Page: "9" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(9) 518 30.67 T
(3 Types) 282.95 750.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
0 10 Q
(intr) 180 713.33 T
(oduced.) 195.76 713.33 T
(The four integer types have widths of 8, 16, 32, and 64 bits, and ar) 233.7 713.33 T
(e) 523.45 713.33 T
(signed unless pr) 180 701.33 T
(e\336xed by the) 252.24 701.33 T
1 F
(unsigned) 311.6 701.33 T
0 F
( modi\336er) 354.37 701.33 T
(.) 394.23 701.33 T
(A variable\325s type does not dir) 180 411.33 T
(ectly af) 310.59 411.33 T
(fect its storage allocation. T) 342.2 411.33 T
(ype only) 461.59 411.33 T
(determines the variable\325s arithmetic pr) 180 399.33 T
(operties and legal range of values. If a) 351.07 399.33 T
(value is assigned to a variable that is outside the legal range of the variable, the) 180 387.33 T
(value is r) 180 375.33 T
(educed modulo the range.) 220.3 375.33 T
( 3.2) 144 339.33 T
4 F
(Floating Point T) 180 339.33 T
(ypes) 249.27 339.33 T
0 F
(The) 180 317.33 T
1 F
(\337oat) 199.24 317.33 T
0 F
( keywor) 219.24 317.33 T
(d denotes single pr) 255.22 317.33 T
(ecision \05032 bit\051;) 339.31 317.33 T
1 F
(double) 408.24 317.33 T
0 F
( denotes double) 440.46 317.33 T
(pr) 180 305.33 T
(ecision \05064 bit\051. The r) 189.78 305.33 T
(esult of a binary operator on two) 281.72 305.33 T
1 F
(\337oat) 429.23 305.33 T
0 F
( operands is a) 449.23 305.33 T
1 F
(\337oat) 512.76 305.33 T
0 F
(.) 532.76 305.33 T
(If either operand is a) 180 293.33 T
1 F
(double) 274.01 293.33 T
0 F
(, the r) 306.23 293.33 T
(esult is a) 331.37 293.33 T
1 F
(double) 372.25 293.33 T
0 F
(.) 404.47 293.33 T
(Floating point arithmetic and data formats ar) 180 269.33 T
(e de\336ned by IEEE 754. See) 379.25 269.33 T
(\322Appendix: Floating Point\323 on page 29 for details on the Oak language\325s \337oating) 180 257.33 T
(point implementation.) 180 245.33 T
( 3.3) 144 209.33 T
4 F
(Boolean T) 180 209.33 T
(ypes) 222.88 209.33 T
0 F
(The) 180 187.33 T
1 F
(boolean) 199.24 187.33 T
0 F
( type is used for variables that can be either) 235.91 187.33 T
5 F
-0.5 (true) 430.01 187.33 S
0 F
( or) 452.01 187.33 T
5 F
-0.5 (false) 466.42 187.33 S
0 F
(, and for) 493.92 187.33 T
(methods that r) 180 175.33 T
(eturn) 244.62 175.33 T
5 F
-0.5 (true) 270.97 175.33 S
0 F
( and) 292.97 175.33 T
5 F
-0.5 (false) 314.9 175.33 S
0 F
( values. It\325s also the type that is r) 342.4 175.33 T
(eturned by) 486.53 175.33 T
(r) 180 163.33 T
(elational operators such as) 183.77 163.33 T
1 F
(>) 303.72 163.33 T
0 F
(.) 309.78 163.33 T
(Boolean values ar) 180 139.33 T
(e not numbers and can\325t be converted into numbers by casting.) 257.94 139.33 T
(Width) 197.45 682.33 T
(Name) 265.54 682.33 T
(Comments) 315 682.33 T
(8) 209 636.33 T
(byte) 269.43 636.33 T
-0.69 (The Oak) 315 666.33 P
1 F
-0.69 (byte) 353.78 666.33 P
0 F
-0.69 ( type is what C programmers are used) 373.78 666.33 P
(to thinking of as the) 315 654.33 T
1 F
(char) 405.78 654.33 T
0 F
( type. But in the Oak lan-) 425.22 654.33 T
(guage, characters are 16 bits wide. Having a sepa-) 315 642.33 T
-0.26 (rate) 315 630.33 P
1 F
-0.26 (byte) 334.24 630.33 P
0 F
-0.26 ( type removes the confusion in C between) 354.24 630.33 P
(the interpretation of) 315 618.33 T
1 F
(char) 406.35 618.33 T
0 F
( as an 8 bit integer and as) 425.79 618.33 T
(a character.) 315 606.33 T
(16) 206.5 578.33 T
(short) 267.64 578.33 T
-0.15 (In C, the width of) 315 590.33 P
1 F
-0.15 (short) 394.64 590.33 P
0 F
-0.15 ( is generally 16 bits, but the) 417.97 590.33 P
-0.47 (C specification says it can be larger. In Oak,) 315 578.33 P
1 F
-0.47 (short) 505.46 578.33 P
0 F
-0.47 ( is) 528.79 578.33 P
(always 16 bits wide.) 315 566.33 T
(32) 206.5 532.33 T
(int) 273.01 532.33 T
(An) 315 550.33 T
1 F
(int) 331.1 550.33 T
0 F
( in the Oak language is always 32 bits wide.) 343.87 550.33 T
(In C, the width of) 315 538.33 T
1 F
(int) 395.38 538.33 T
0 F
( is implementation defined) 408.15 538.33 T
(and is most often 32 bits, but is sometimes 16 bits,) 315 526.33 T
(and has been other values \050such as 60\051.) 315 514.33 T
(64) 206.5 468.33 T
(long) 269.12 468.33 T
(The Oak language\325s definition of) 315 498.33 T
1 F
(long) 462.46 498.33 T
0 F
(is a break) 485.52 498.33 T
(from the C tradition that specifies that) 315 486.33 T
1 F
(long) 486.05 486.33 T
0 F
( is 32) 506.61 486.33 T
(bits and) 315 474.33 T
1 F
(long long) 352.87 474.33 T
0 F
( is 64 bits. With the standardiza-) 396.49 474.33 T
(tion of) 315 462.33 T
1 F
(int) 346.24 462.33 T
0 F
( to mean 32 bits, it is redundant to have) 359.01 462.33 T
-0.41 (two types with the same meaning and unnecessary) 315 450.33 P
(to have such an odd type name for 64 bits.) 315 438.33 T
180 676 540 676 2 L
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
45 678 153 711.3 C
0 0 0 1 0 0 0 K
45 635.02 153 707.02 R
7 X
0 0 0 1 0 0 0 K
V
1 9 Q
0 X
(unsigned) 45 701.02 T
0 F
( isn\325t implement-) 83.49 701.02 T
(ed yet; it might never be.) 45 692.02 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
45 359.14 153 385.3 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 309.02 153 381.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(V) 45 375.02 T
(alue r) 50.67 375.02 T
(eduction is not im-) 73.17 375.02 T
(plemented yet.) 45 366.02 T
0 0 612 792 C
45 304 153 325.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 251.02 153 323.02 R
7 X
0 0 0 1 0 0 0 K
V
1 9 Q
0 X
-0.67 (double) 45 317.02 P
0 F
-0.67 ( is not implemented) 74 317.02 P
(yet.) 45 308.02 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "9" 30
%%Page: "8" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(3 Types) 282.95 750.67 T
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(8) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(Confidential) 477.67 30.67 T
0 10 Q
(2.4.3) 144 713.33 T
7 F
(Boolean Literals) 180 713.33 T
0 F
-0.24 (The) 180 691.33 P
1 F
-0.24 (boolean) 199 691.33 P
0 F
-0.24 ( type has two literal values:) 235.67 691.33 P
5 F
-0.54 -0.5 (true) 357.79 691.33 B
0 F
-0.24 ( and) 379.79 691.33 P
5 F
-0.54 -0.5 (false) 401.23 691.33 B
0 F
-0.24 (. See \322Boolean T) 428.73 691.33 P
-0.24 (ypes\323 on) 498.61 691.33 P
(page 9 for mor) 180 679.33 T
(e information on boolean values.) 244.66 679.33 T
(2.4.4) 144 649.33 T
7 F
(Character Literals) 180 649.33 T
0 F
(A character literal is a character \050or gr) 180 627.33 T
(oup of characters r) 346.53 627.33 T
(epr) 428.98 627.33 T
(esenting a single) 443.55 627.33 T
(character\051 enclosed in single quotes.) 180 615.33 T
(Characters have type) 341.88 615.33 T
1 F
(char) 437.8 615.33 T
0 F
( and ar) 457.24 615.33 T
(e drawn) 487.94 615.33 T
(fr) 180 603.33 T
(om the Unicode character set \050see \322Character T) 187.1 603.33 T
(ypes\323 on page 10\051.) 393.69 603.33 T
(2.4.5) 144 573.33 T
7 F
(String Literals) 180 573.33 T
0 F
(A string literal is zer) 180 551.33 T
(o or mor) 269.96 551.33 T
(e characters enclosed in double quotes. Each string) 307.89 551.33 T
(literal is implemented as a String object \050) 180 539.33 T
2 F
(not) 359.57 539.33 T
0 F
( as an array of characters\051.) 372.9 539.33 T
( 2.5) 144 503.33 T
4 F
(Operators and Miscellaneous Separators) 180 503.33 T
0 F
(The following characters ar) 180 481.33 T
(e used in Oak sour) 300.6 481.33 T
(ce code as operators or separators:) 383.21 481.33 T
(+) 180 457.33 T
(\320) 196.06 457.33 T
(!) 211.06 457.33 T
(%) 223.84 457.33 T
(^) 242.24 457.33 T
(&) 258.3 457.33 T
(*) 276.08 457.33 T
(|) 289.97 457.33 T
(~) 306.03 457.33 T
(/) 322.09 457.33 T
(>) 338.15 457.33 T
(<) 354.21 457.33 T
(\050) 370.27 457.33 T
(\051) 383.6 457.33 T
({) 396.93 457.33 T
(}) 410.26 457.33 T
([) 423.59 457.33 T
(]) 436.92 457.33 T
(;) 450.25 457.33 T
(?) 462.75 457.33 T
(:) 477.19 457.33 T
(,) 489.69 457.33 T
(.) 502.19 457.33 T
(=) 514.69 457.33 T
(In addition, the following character combinations ar) 180 433.33 T
(e used as operators:) 409.94 433.33 T
(++) 180 409.33 T
(\320\320) 202.12 409.33 T
(==) 222.12 409.33 T
(<=) 244.24 409.33 T
(>=) 266.36 409.33 T
(!=) 288.48 409.33 T
(<<) 307.32 409.33 T
(>>) 329.44 409.33 T
(>>>) 351.56 409.33 T
(+=) 379.74 409.33 T
(\320=) 401.86 409.33 T
(*=) 422.92 409.33 T
(/=) 442.87 409.33 T
(&=) 464.99 409.33 T
(|=) 488.83 409.33 T
(^=) 510.95 409.33 T
(%=) 180 397.33 T
(<<=) 204.46 397.33 T
(>>=) 232.64 397.33 T
(>>>=) 260.82 397.33 T
(||) 295.06 397.33 T
(&&) 317.18 397.33 T
(For documentation of each operator) 180 373.33 T
(, see \322Operators\323 on page 22.) 338.14 373.33 T
0 14 Q
(3) 144 318.67 T
6 F
(T) 180 318.67 T
(ypes) 188.04 318.67 T
0 10 Q
(Every variable and every expr) 180 293.33 T
(ession has a type. T) 313.2 293.33 T
(ype determines the allowable) 398.07 293.33 T
-0.2 (range of values a variable can hold, allowable operations on those values, and the) 180 281.33 P
(meanings of the operations. A number of built-in types ar) 180 269.33 T
(e pr) 434.38 269.33 T
(ovided by the Oak) 451.45 269.33 T
(language. Pr) 180 257.33 T
(ogrammers can compose new types using the) 235.48 257.33 T
2 F
(class) 439.32 257.33 T
0 F
( and) 458.39 257.33 T
2 F
(interface) 480.32 257.33 T
0 F
(mechanisms \050see \322Classes\323 on page 10 and \322Interfaces\323 on page 18\051.) 180 245.33 T
-0.38 (The Oak language has two kinds of types: simple and composite. Simple types ar) 180 221.33 P
-0.38 (e) 533.09 221.33 P
(those that cannot be br) 180 209.33 T
(oken down; they ar) 280.33 209.33 T
(e atomic. The integer) 365.89 209.33 T
(, \337oating point,) 457.66 209.33 T
(boolean, and character types ar) 180 197.33 T
(e all simple types. Composite types ar) 317.68 197.33 T
(e built on) 485.02 197.33 T
(simple types. The Oak language has thr) 180 185.33 T
(ee kinds of composite types\321arrays,) 354.79 185.33 T
(classes, and interfaces.) 180 173.33 T
( Simple types and arrays ar) 281.82 173.33 T
(e discussed in this section.) 402.28 173.33 T
( 3.1) 144 137.33 T
4 F
(Integer T) 180 137.33 T
(ypes) 219.53 137.33 T
0 F
(Integers in the Oak language ar) 180 115.33 T
(e similar to those in C and C++, with two) 318.74 115.33 T
-0.38 (exceptions: all integer types ar) 180 103.33 P
-0.38 (e machine independent, and some of the traditional) 312.4 103.33 P
(de\336nitions have been changed to r) 180 91.33 T
(e\337ect changes in the world since C was) 332.09 91.33 T
45 588.43 171 641.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 588.43 171 641.65 R
7 X
0 0 0 1 0 0 0 K
V
46.01 576.5 171 638.5 R
V
0 9 Q
0 X
(Character literals ar) 46.01 632.5 T
(e curr) 124.34 632.5 T
(ently) 147.28 632.5 T
(implemented much like in C.) 46.01 623.5 T
(When Unicode support is im-) 46.01 614.5 T
(plemented, escape sequences) 46.01 605.5 T
(will change.) 46.01 596.5 T
0 0 612 792 C
45 87.15 153 123.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 49.02 153 121.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
-0.07 (Curr) 45 115.02 P
-0.07 (ently) 63.76 115.02 P
-0.07 (, all integer types) 82.86 115.02 P
(act like 32-bit, 2\325s comple-) 45 106.02 T
(ment, signed integers.) 45 97.02 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "8" 31
%%Page: "7" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(7) 518 30.67 T
(2 Lexical Issues) 269.35 750.67 T
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
0 10 Q
( 2.3) 144 713.33 T
4 F
(Keywords) 180 713.33 T
0 F
-0.36 (The following identi\336ers ar) 180 691.33 P
-0.36 (e r) 299.47 691.33 P
-0.36 (eserved for use as keywor) 310.18 691.33 P
-0.36 (ds. They must not be used) 423.59 691.33 P
(in any other way) 180 679.33 T
(.) 253.68 679.33 T
( 2.4) 144 537.33 T
4 F
(Literals) 180 537.33 T
0 F
(Literals ar) 180 515.33 T
(e the basic r) 224.44 515.33 T
(epr) 276.49 515.33 T
(esentation of any integer) 291.06 515.33 T
(, \337oating point, boolean,) 399.42 515.33 T
(character) 180 503.33 T
(, or string value.) 219.91 503.33 T
(2.4.1) 144 473.33 T
7 F
(Integer Literals) 180 473.33 T
0 F
(Integers can be expr) 180 451.33 T
(essed in decimal \050base 10\051, hexadecimal \050base 16\051, or octal) 268.59 451.33 T
(\050base 8\051 format. A decimal integer literal consists of a sequence of digits) 180 439.33 T
(\050optionally suf) 180 427.33 T
(\336xed as described below\051) 244.55 427.33 T
2 F
(without) 359.13 427.33 T
0 F
( a leading zer) 390.79 427.33 T
(o \050) 449.95 427.33 T
5 F
-0.5 (0) 461.24 427.33 S
0 F
(\051. If an integer) 466.74 427.33 T
-0.34 (literal begins with) 180 415.33 P
5 F
-0.75 -0.5 (0x) 261.39 415.33 B
0 F
-0.34 (, it is interpr) 272.39 415.33 P
-0.34 (eted as a hexadecimal integer) 325.21 415.33 P
-0.34 (. If a nonzer) 453.14 415.33 P
-0.34 (o literal) 504.49 415.33 P
(begins with) 180 403.33 T
5 F
-0.5 (0) 234.18 403.33 S
0 F
(, it is interpr) 239.68 403.33 T
(eted as an octal integer) 293.51 403.33 T
(. Hexadecimal integers can) 393.93 403.33 T
-0.07 (include digits \0500-9\051 and the letters a-f and A-F) 180 391.33 P
-0.07 (. Octal integers can include only the) 379.79 391.33 P
(digits 0-7.) 180 379.33 T
(The type of an integer literal is the narr) 180 355.33 T
(owest integer type that it \336ts in \050see) 352.34 355.33 T
(\322Integer T) 180 343.33 T
(ypes\323 on page 8\051. A literal can be for) 224.27 343.33 T
(ced to be) 384.99 343.33 T
1 F
(long) 426.87 343.33 T
0 F
( by appending an) 447.43 343.33 T
5 F
-0.5 (L) 527.37 343.33 S
0 F
(or) 180 331.33 T
5 F
-0.5 (l) 191.91 331.33 S
0 F
( to its value.) 197.41 331.33 T
(2.4.2) 144 301.33 T
7 F
(Floating Point Literals) 180 301.33 T
0 F
(A \337oating point literal can have the following parts: a decimal integer) 180 279.33 T
(, a decimal) 486.94 279.33 T
(point \050\322.\323\051, a fraction \050another decimal number\051, an exponent, and a type suf) 180 267.33 T
(\336x.) 516.89 267.33 T
(The exponent part is an) 180 255.33 T
5 F
-0.5 (e) 286.54 255.33 S
0 F
( or) 292.04 255.33 T
5 F
-0.5 (E) 306.45 255.33 S
0 F
( followed by an integer) 311.95 255.33 T
(, which can be signed. A) 413.51 255.33 T
(\337oating point literal must have at least one digit, plus either a decimal point or) 180 243.33 T
5 F
-0.5 (e) 529.75 243.33 S
0 F
(\050or) 180 231.33 T
5 F
-0.5 (E) 195.24 231.33 S
0 F
(\051.) 200.74 231.33 T
(As described in \322Floating Point T) 180 207.33 T
(ypes\323 on page 9, the Oak language has two) 326.32 207.33 T
(\337oating point types:) 180 195.33 T
1 F
(\337oat) 271.41 195.33 T
0 F
( \050IEEE 754 single pr) 291.41 195.33 T
(ecision\051 and) 377.45 195.33 T
1 F
(double) 433.28 195.33 T
0 F
( \050IEEE 754) 465.5 195.33 T
(double pr) 180 183.33 T
(ecision\051. Y) 223.11 183.33 T
(ou specify the type of a \337oating point literal as follows:) 267.76 183.33 T
5 F
-0.5 (2.0d) 189 165.33 S
0 F
( or) 211 165.33 T
5 F
-0.5 (2.0D) 225.41 165.33 S
1 F
(double) 288 165.33 T
5 F
-0.5 (2.0f) 189 153.33 S
0 F
( or) 211 153.33 T
5 F
-0.5 (2.0F) 225.41 153.33 S
0 F
( or) 247.41 153.33 T
5 F
-0.5 (2.0) 261.82 153.33 S
1 F
(\337oat) 288 153.33 T
0 F
(Specifying too many signi\336cant digits for a single pr) 180 130.33 T
(ecision literal is an err) 410.72 130.33 T
(or) 507.5 130.33 T
(.) 516.17 130.33 T
(boolean) 180 663.33 T
(br) 180 653.33 T
(eak) 189.3 653.33 T
(byte) 180 643.33 T
(case) 180 633.33 T
(catch) 180 623.33 T
(char) 180 613.33 T
(class) 180 603.33 T
(clone) 180 593.33 T
(const) 180 583.33 T
(continue) 180 573.33 T
(Cstring) 252 663.33 T
(default) 252 653.33 T
(do) 252 643.33 T
(double) 252 633.33 T
(else) 252 623.33 T
(enum) 252 613.33 T
(\336nal) 252 603.33 T
(\336nally) 252 593.33 T
(\337oat) 252 583.33 T
(for) 252 573.33 T
(goto) 324 663.33 T
(if) 324 653.33 T
(import) 324 643.33 T
(instanceof) 324 633.33 T
(int) 324 623.33 T
(interface) 324 613.33 T
(long) 324 603.33 T
(new) 324 593.33 T
(private) 324 583.33 T
(pr) 324 573.33 T
(otect) 333.78 573.33 T
(pr) 396 663.33 T
(otected) 405.78 663.33 T
(public) 396 653.33 T
(r) 396 643.33 T
(eturn) 399.77 643.33 T
(short) 396 633.33 T
(static) 396 623.33 T
(string) 396 613.33 T
(super) 396 603.33 T
(switch) 396 593.33 T
(synchr) 396 583.33 T
(onized) 425.65 583.33 T
(this) 396 573.33 T
(thr) 468 663.33 T
(ow) 480.85 663.33 T
(transient) 468 653.33 T
(try) 468 643.33 T
(unpr) 468 633.33 T
(otect) 489.63 633.33 T
(unsynchr) 468 623.33 T
(onized) 509.5 623.33 T
(ushort) 468 613.33 T
(void) 468 603.33 T
(volatile) 468 593.33 T
(while) 468 583.33 T
45 567 153 699.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 573.87 153 697.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(The) 45 691.02 T
1 F
(ushort) 62.32 691.02 T
0 F
(,) 88.81 691.02 T
1 F
(Cstring) 93.31 691.02 T
0 F
(,) 123.8 691.02 T
1 F
(string) 45 682.02 T
0 F
(, and) 68.99 682.02 T
1 F
(unsynchro-) 90.98 682.02 T
(nized) 45 673.02 T
0 F
( keywor) 68 673.02 T
(ds ar) 100.38 673.02 T
(e obso-) 119.83 673.02 T
(lete.) 45 664.02 T
(The) 45 650.02 T
1 F
(protect) 62.32 650.02 T
0 F
(and) 93.06 650.02 T
1 F
( unprotect) 108.3 650.02 T
0 F
(keywor) 45 641.02 T
(ds ar) 75.13 641.02 T
(e subject to) 94.59 641.02 T
(change.) 45 632.02 T
1 F
(enum) 45 618.02 T
0 F
( isn\325t implemented) 68.5 618.02 T
(yet.) 45 609.02 T
1 F
-0.55 (instanceof) 45 595.02 P
0 F
-0.55 ( might become a) 87.49 595.02 P
(method instead of a key-) 45 586.02 T
(wor) 45 577.02 T
(d.) 60.81 577.02 T
0 0 612 792 C
45 328.26 171 369.65 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 328.26 171 369.65 R
7 X
0 0 0 1 0 0 0 K
V
46.01 322.5 171 366.5 R
V
0 9 Q
0 X
(T) 46.01 360.5 T
(ype determination is not im-) 50.72 360.5 T
(plemented yet. For) 46.01 351.5 T
(cing literals) 120.9 351.5 T
(to be) 46.01 342.5 T
1 F
(long) 67.64 342.5 T
0 F
( is not implemented) 86.15 342.5 T
(yet.) 46.01 333.5 T
0 0 612 792 C
45 179.02 153 215.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 141.02 153 213.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(Double pr) 45 207.02 T
(ecision, NaN,) 85.27 207.02 T
(Inf, and the type suf) 45 198.02 T
(\336xes) 124.97 198.02 T
(ar) 45 189.02 T
(e not implemented yet.) 52.89 189.02 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "7" 32
%%Page: "6" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(2 Lexical Issues) 269.35 750.67 T
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(6) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(Confidential) 477.67 30.67 T
0 14 Q
(2) 144 710.67 T
6 F
(Lexical Issues) 180 710.67 T
0 10 Q
(During compilation, the characters in Oak sour) 180 689.33 T
(ce code ar) 387.93 689.33 T
(e r) 431.73 689.33 T
(educed to a series of) 442.79 689.33 T
(tokens. The Oak compiler r) 180 677.33 T
(ecognizes \336ve kinds of tokens: identi\336ers, keywor) 299.86 677.33 T
(ds,) 520.23 677.33 T
(literals, operators, and miscellaneous separators. Comments and) 180 665.33 T
2 F
(white space) 467.54 665.33 T
0 F
( such) 513.55 665.33 T
(as blanks, tabs, and line feeds ar) 180 653.33 T
(e not tokens, but they often ar) 321.72 653.33 T
(e used to separate) 453.36 653.33 T
(tokens.) 180 641.33 T
(Oak pr) 180 617.33 T
(ograms ar) 210.7 617.33 T
(e written using the Unicode character set, or some character set) 255.01 617.33 T
(that is converted to Unicode befor) 180 605.33 T
(e being compiled.) 330.17 605.33 T
( 2.1) 144 569.33 T
4 F
(Comments) 180 569.33 T
0 F
(The Oak language has four kinds of comments:) 180 547.33 T
5 11 Q
(//) 207 523.33 T
8 F
(text) 226.8 523.33 T
0 10 Q
(All characters fr) 306 523.33 T
(om) 376.59 523.33 T
1 F
( //) 390.88 523.33 T
0 F
( to the end of the line ar) 399.3 523.33 T
(e) 503.97 523.33 T
(ignor) 306 511.33 T
(ed.) 329.52 511.33 T
5 11 Q
(/*) 207 487.33 T
8 F
(text) 226.8 487.33 T
5 F
( */) 253.2 487.33 T
0 10 Q
(All characters fr) 306 487.33 T
(om) 376.59 487.33 T
1 F
(/*) 393.38 487.33 T
0 F
( to) 400.78 487.33 T
1 F
(*/) 414.5 487.33 T
0 F
( ar) 421.9 487.33 T
(e ignor) 433.17 487.33 T
(ed.) 463.98 487.33 T
5 11 Q
(/**) 207 463.33 T
8 F
(text) 233.4 463.33 T
5 F
( */) 259.8 463.33 T
0 10 Q
(Like) 306 463.33 T
1 F
(/*) 327.87 463.33 T
0 F
(...) 335.27 463.33 T
1 F
(*/) 342.77 463.33 T
0 F
(, except that these comments ar) 350.17 463.33 T
(e tr) 488.3 463.33 T
(eated) 502.62 463.33 T
(specially when they occur immediately befor) 306 451.33 T
(e any) 504.57 451.33 T
(declaration) 306 439.33 T
( or when they occur on the same line as a) 355.65 439.33 T
(declaration \050even if after it\051. These comments) 306 427.33 T
(indicate that the enclosed text should be included in) 306 415.33 T
(automatically generated documentation as a) 306 403.33 T
(description of the declar) 306 391.33 T
(ed item.) 413.08 391.33 T
5 11 Q
(//*) 207 367.33 T
8 F
(text) 233.4 367.33 T
0 10 Q
(Like //, except that these comments, like /**...*/,) 306 367.33 T
(indicate text to be included in automatically) 306 355.33 T
(generated documentation. Any subsequent //) 306 343.33 T
(comments with no intervening code ar) 306 331.33 T
(e included in) 476.63 331.33 T
(the automatically generated documentation for the) 306 319.33 T
(declar) 306 307.33 T
(ed item.) 333.02 307.33 T
( 2.2) 144 271.33 T
4 F
(Identi\336ers) 180 271.33 T
0 F
(Identi\336ers must start with a letter) 180 249.33 T
(, underscor) 327.41 249.33 T
(e \050\322_\323\051, or dollar sign \050\322$\323\051;) 377.02 249.33 T
(subsequent characters can also contain digits. For the part of Unicode that) 180 237.33 T
-0.18 (overlaps ISO-Latin-1, letters ar) 180 225.33 P
-0.18 (e the characters \322A\323 thr) 314.68 225.33 P
-0.18 (ough \322Z\323, \322a\323 thr) 418.14 225.33 P
-0.18 (ough \322z\323,) 494.99 225.33 P
(and all the accented letters) 180 213.33 T
(. Other characters valid after the \336rst letter of an) 297.47 213.33 T
-0.42 (identi\336er include every character except those in the segment of Unicode r) 180 201.33 P
-0.42 (eserved) 503.6 201.33 P
(for special characters.) 180 189.33 T
(Thus \322gar\215on\323 and \322Mj\277lner\323 ar) 180 165.33 T
(e legal identi\336ers, but strings containing) 322.98 165.33 T
(characters such as \322\246\323 ar) 180 153.33 T
(e not.) 289.71 153.33 T
45 576 153 639 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 559.21 153 631.21 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(Unicode sour) 45 625.21 T
(ce \336les ar) 98.38 625.21 T
(en\325t) 135.27 625.21 T
(allowed yet because) 45 616.21 T
(ther) 45 607.21 T
(e\325s no editor/develop-) 60.88 607.21 T
(ment envir) 45 598.21 T
(onment to gen-) 88.33 598.21 T
(erate them. Instead, ASCII) 45 589.21 T
(input is accepted.) 45 580.21 T
0 0 612 792 C
0 0 0 1 0 0 0 K
45 415.05 153 471.29 C
0 0 0 1 0 0 0 K
45 397.02 153 469.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(See the) 45 463.02 T
5 10 Q
-0.5 (oak) 75.33 463.02 S
0 9 Q
(\0501\051 man page) 91.83 463.02 T
(for information on auto-) 45 454.02 T
(matically generating docu-) 45 445.02 T
(mentation.) 45 436.02 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
45 217.04 153 258.59 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 183.02 153 255.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(Unicode identi\336ers ar) 45 249.02 T
(en\325t) 131.32 249.02 T
(implemented yet. Instead,) 45 240.02 T
(identi\336ers ar) 45 231.02 T
(e ASCII and) 95.49 231.02 T
(follow the C r) 45 222.02 T
(ules.) 99.67 222.02 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "6" 33
%%Page: "5" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
(Confidential) 54 30.67 T
(Oak Language Specification) 247.11 30.67 T
(5) 518 30.67 T
2 30 Q
-1.5 (Oak Language Speci\336cation) 144 700 S
0 10 Q
(This document is a pr) 180 647.33 T
(eliminary speci\336cation of the Oak language. Both the) 275.77 647.33 T
-0.12 (speci\336cation and the language ar) 180 635.33 P
-0.12 (e subject to change. When a featur) 325.08 635.33 P
-0.12 (e that exists in) 475.03 635.33 P
-0.28 (both Oak and ANSI) 180 623.33 P
-0.28 (C isn\325t explained fully in this speci\336cation, the featur) 269.28 623.33 P
-0.28 (e should) 500.2 623.33 P
(be assumed to work as it does in ANSI C.) 180 611.33 T
0 14 Q
(1) 144 556.67 T
6 F
(Program Structure) 180 556.67 T
0 10 Q
(The sour) 180 535.33 T
(ce code for an Oak pr) 218.74 535.33 T
(ogram consists of one or mor) 313.03 535.33 T
(e) 441.27 535.33 T
2 F
(compilation units) 448.56 535.33 T
0 F
(.) 519.58 535.33 T
(Each compilation unit can contain only the following \050in addition to white space) 180 523.33 T
(and comments\051:) 180 511.33 T
(\245) 189 493.33 T
(a package statement \050see \322Packages\323 on page 19\051) 207 493.33 T
(\245) 189 478.33 T
(import statements \050see \322Packages\323 on page 19\051) 207 478.33 T
(\245) 189 463.33 T
(class declarations \050see \322Classes\323 on page 10\051) 207 463.33 T
(\245) 189 448.33 T
(interface declarations \050see \322Interfaces\323 on page 18\051) 207 448.33 T
-0.03 (Although each Oak compilation unit can contain multiple classes or interfaces, at) 180 424.33 P
(most one class or interface per compilation unit can be public \050see \322Classes\323 on) 180 412.33 T
(page 10\051.) 180 400.33 T
(When Oak sour) 180 376.33 T
(ce code is compiled, the r) 249.35 376.33 T
(esult is Oak bytecode. Oak bytecode) 360.63 376.33 T
(consists of machine-independent instr) 180 364.33 T
(uctions that can be interpr) 348.17 364.33 T
(eted quickly by) 463.76 364.33 T
(the Oak r) 180 352.33 T
(untime system.) 221.16 352.33 T
1 F
(Implementation Note:) 180 328.33 T
0 F
(In the curr) 288 328.33 T
(ent Oak implementation, each compilation) 334.25 328.33 T
(unit is a \336le with an \322.oak\323 suf) 180 316.33 T
(\336x.) 314.51 316.33 T
( 1.1) 144 280.33 T
4 F
(Starting Oak Pr) 180 280.33 T
(ograms) 248.71 280.33 T
0 F
-0.3 (When an Oak pr) 180 258.33 P
-0.3 (ogram is executed, the interpr) 252.04 258.33 P
-0.3 (eter must determine which method) 383.02 258.33 P
-0.16 (to execute \336rst. It does so by executing the class method) 180 246.33 P
5 F
-0.35 -0.5 (main\050\051) 427.5 246.33 B
0 F
-0.16 ( in the class that\325s) 460.5 246.33 P
(speci\336ed when the interpr) 180 234.33 T
(eter is invoked. The) 295.99 234.33 T
5 F
-0.5 (main\050\051) 385.47 234.33 S
0 F
( method must have the) 418.47 234.33 T
(following de\336nition:) 180 222.33 T
5 9 Q
(public static void main\050String) 198 200 T
8 F
(arguments) 365.4 200 T
5 F
([]\051 {) 414 200 T
8 F
(    /* startup code goes here */) 198 191 T
5 F
(}) 198 182 T
0 10 Q
(At least one class per pr) 180 160.33 T
(ogram must implement the) 285.17 160.33 T
5 F
-0.5 (main\050\051) 408.35 160.33 S
0 F
( method.) 441.35 160.33 T
45 358.02 153 432 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 358.02 153 430.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(This r) 45 424.02 T
(estriction is not yet) 67.83 424.02 T
(enfor) 45 415.02 T
(ced by the compiler) 65.85 415.02 T
(,) 143.58 415.02 T
(although it\325s necessary for) 45 406.02 T
(ef) 45 397.02 T
(\336cient package importa-) 52.15 397.02 T
-0.2 (tion \050which is documented) 45 388.02 P
(in \322Packages\323 on page 19\051.) 45 379.02 T
0 0 612 792 C
45 198.03 153 243.43 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
45 168.02 153 240.02 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(In the UNIX implementa-) 45 234.02 T
(tion, the classname is spec-) 45 225.02 T
(i\336ed as follows:) 45 216.02 T
5 10 Q
-0.5 (oaki) 45 207.02 S
8 9 Q
(ClassName) 72.5 207.02 T
(args) 126.6 207.02 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "5" 34
%%Page: "iv" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(\251) 458.1 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(iv) 54 30.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Contents) 280.74 30.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Confidential) 477.67 30.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(6) 180 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Packages) 207 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 250 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 530 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 6.1) 207 701.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Specifying a Compilation Unit\325s Package) 243 701.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . .) 425 701.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 530 701.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 6.2) 207 689.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Using Classes and Interfaces from Other Packages) 243 689.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . .) 465 689.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 530 689.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7) 180 669.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Assertions) 207 669.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 255 669.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 530 669.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 7.1) 207 657.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Constraints on Instance Variables and Methods) 243 657.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . .) 452.5 657.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 530 657.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 7.2) 207 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Preconditions and Postconditions) 243 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . .) 392.5 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 530 645.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 180 625.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Expr) 207 625.33 T
(essions) 228.05 625.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 260 625.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 530 625.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 8.1) 207 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Operators) 243 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 290 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 530 613.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.1.1) 243 601.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Operators on Integers) 279 601.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 377.5 601.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 530 601.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.1.2) 243 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Operators on Boolean Values) 279 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . .) 410 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 530 589.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.1.3) 243 577.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Operators on Floating Point Values) 279 577.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . .) 435 577.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 530 577.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.1.4) 243 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Operators on Strings) 279 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 372.5 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 530 565.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8.1.5) 243 553.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Operators on Objects) 279 553.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 372.5 553.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 530 553.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 8.2) 207 541.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Casts and Conversions) 243 541.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 345 541.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 530 541.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 180 521.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Statements) 207 521.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 257.5 521.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 530 521.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 9.1) 207 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Declarations) 243 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 300 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 530 509.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 9.2) 207 497.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Expressions) 243 497.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 297.5 497.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 530 497.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 9.3) 207 485.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Control Flow) 243 485.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 302.5 485.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 530 485.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 9.4) 207 473.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exceptions) 243 473.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 292.5 473.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 530 473.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9.4.1) 243 461.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 279 461.33 T
1 F
(\336nally) 298.24 461.33 T
0 F
( Statement) 327.68 461.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 375 461.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 530 461.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9.4.2) 243 449.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Asynchronous Exceptions) 279 449.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 395 449.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 530 449.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 180 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Garbage Collection) 207 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 292.5 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 530 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A) 180 409.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Appendix: Floating Point) 207 409.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 320 409.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 530 409.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( A.1) 207 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Special Values) 243 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 307.5 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 530 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( A.2) 207 385.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Binary Format Conversion) 243 385.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 362.5 385.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 530 385.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( A.3) 207 373.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ordering) 243 373.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 285 373.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 530 373.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( A.4) 207 361.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Summary of IEEE-754 Differences) 243 361.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . .) 395 361.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 530 361.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Glossary) 180 341.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 220 341.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 530 341.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Index) 180 321.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207.5 321.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 530 321.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iv" 35
%%Page: "iii" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(\251) 457.6 750.67 T
1 F
(firstperson) 466.08 750.67 T
0 F
(,) 506.07 750.67 T
2 F
(inc) 510.07 750.67 T
0 F
(.) 520 750.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Confidential) 54 30.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Oak Language Specification) 247.11 30.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(iii) 515.02 30.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 657 540 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 657 540 720 R
7 X
0 0 0 1 0 0 0 K
V
0 0 612 792 C
2 30 Q
0 X
0 0 0 1 0 0 0 K
-1.5 (Contents) 144 637 S
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(1) 180 569.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Pr) 207 569.33 T
(ogram Str) 216.81 569.33 T
(uctur) 260.49 569.33 T
(e) 284.02 569.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 290 569.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5) 535 569.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 1.1) 207 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Starting Oak Programs) 243 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 345 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5) 535 557.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2) 180 537.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lexical Issues) 207 537.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 270 537.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6) 535 537.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 2.1) 207 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Comments) 243 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 292.5 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6) 535 525.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 2.2) 207 513.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Identifiers) 243 513.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 290 513.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6) 535 513.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 2.3) 207 501.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Keywords) 243 501.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 290 501.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7) 535 501.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 2.4) 207 489.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Literals) 243 489.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 277.5 489.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7) 535 489.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.4.1) 243 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Integer Literals) 279 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 347.5 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7) 535 477.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.4.2) 243 465.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Floating Point Literals) 279 465.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 377.5 465.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7) 535 465.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.4.3) 243 453.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Boolean Literals) 279 453.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 352.5 453.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 535 453.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.4.4) 243 441.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Character Literals) 279 441.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 360 441.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 535 441.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.4.5) 243 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(String Literals) 279 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 342.5 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 535 429.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 2.5) 207 417.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Operators and Miscellaneous Separators) 243 417.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . .) 422.5 417.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 535 417.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3) 180 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 207 397.33 T
(ypes) 212.23 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 235 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 535 397.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 3.1) 207 385.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Integer Types) 243 385.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 305 385.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 535 385.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 3.2) 207 373.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Floating Point Types) 243 373.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 335 373.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 535 373.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 3.3) 207 361.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Boolean Types) 243 361.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 310 361.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 535 361.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 3.4) 207 349.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Character Types) 243 349.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 317.5 349.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 530 349.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 3.5) 207 337.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Arrays) 243 337.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 275 337.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 530 337.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 180 317.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Classes) 207 317.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240 317.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 530 317.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 4.1) 207 305.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Instance Variables) 243 305.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 325 305.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 530.55 305.33 T
(1) 535 305.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 4.2) 207 293.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Methods) 243 293.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 282.5 293.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 530 293.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 4.3) 207 281.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Overriding and Overloading Methods) 243 281.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . .) 412.5 281.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 530 281.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 4.4) 207 269.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Used before Set) 243 269.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 312.5 269.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 530 269.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 4.5) 207 257.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Class Variables and Methods) 243 257.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 372.5 257.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13) 530 257.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 4.6) 207 245.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Constants) 243 245.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 287.5 245.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 530 245.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 4.7) 207 233.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Volatile Variables) 243 233.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 322.5 233.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 530 233.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 4.8) 207 221.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Transient Variables) 243 221.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 330 221.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 530 221.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 4.9) 207 209.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Final Classes and Methods) 243 209.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 362.5 209.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 530 209.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 4.10) 207 197.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Access to Variables and Methods) 243 197.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . .) 390 197.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 530 197.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 4.11) 207 185.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Synchronized Methods and Blocks) 243 185.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . .) 397.5 185.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 530 185.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 4.12) 207 173.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Constructors) 243 173.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 302.5 173.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 530 173.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 4.13) 207 161.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Order of Declarations) 243 161.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 340 161.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(17) 530 161.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5) 180 141.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Interfaces) 207 141.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 250 141.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 530 141.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 5.1) 207 129.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Interfaces as Types) 243 129.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 327.5 129.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 530 129.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 5.2) 207 117.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Constants in Interfaces) 243 117.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 345 117.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 530 117.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( 5.3) 207 105.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Combining Interfaces) 243 105.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 340 105.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 530 105.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iii" 36
%%Page: "2" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
184.97 83.74 393.7 101.23 R
7 X
0 0 0 1 0 0 0 K
V
1 1 0 0 0 0 1 K
0 28 26 105 100 36 36 17.33 132.83 FMBEGINEPSF
%%BeginDocument: <inline>
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Adobe Illustrator(TM) 3.0
%%For: (clyde) (sun)
%%Title: (recycle.logo)
%%CreationDate: (9/24/91) (4:13 PM)
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_IllustratorA_AI3 1.0 0
%%BoundingBox: 28 26 105 100
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_Pic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 0
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
userdict /Adobe_IllustratorA_AI3_vars 46 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /i0 /i0 /i0 /i0] def 
/_renderEnd [null null null null /e1 /r1 /a1 /clip] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
%%EndSetup
0 A
u
u
0 R
0 G
0 i 0 J 0 j 1.5 w 10 M []0 d
%AI3_Note:
0 D
55.8513 89.3866 m
70.6271 89.3302 l
77.0061 89.4337 78.4273 86.3828 y
81.2352 82.0317 l
85.1147 84.3127 l
78.8875 72.4495 l
65.0513 72.4954 l
68.806 74.7695 l
62.7847 84.0125 l
57.169 92.7147 54.0208 88.5339 53.0985 87.1056 c
46.3582 75.4643 l
58.1242 68.7309 l
65.0414 80.5698 l
S
U
u
46.1811 39.5344 m
38.8421 52.3589 l
35.5629 57.8315 37.4945 60.5878 y
39.8587 65.195 l
35.9435 67.4144 l
49.3311 67.953 l
56.2094 55.9475 l
52.3626 58.0622 l
47.3685 48.226 l
42.64 39.0115 47.8349 38.3755 49.5329 38.2909 c
62.9848 38.2743 l
62.9331 51.8307 l
49.2217 51.9017 l
S
U
u
94.6634 56.0541 m
87.2266 43.2861 l
84.1268 37.7099 80.774 38.0046 y
75.6019 37.7484 l
75.6374 33.2481 l
68.4772 44.5727 l
75.4352 56.5324 l
75.5272 52.1436 l
86.5426 52.7367 l
96.8869 53.249 94.8403 58.0658 94.0645 59.5787 c
87.353 71.2367 l
75.6386 64.4136 l
82.4327 52.5037 l
S
U
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
FMENDEPSF
-0.67 96.83 71.33 132.83 R
1 1 0 0 0 0 1 K
V
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
0.08 (Please) 23.99 127.5 S
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
0.08 (Recycle) 21.61 116.5 S
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
9 9 Q
1 1 0 0 0 0 1 K
-0.58 0.09 (\323) 54 642 B
0 F
-0.58 0.09 ( 1994 FirstPerson, Inc. All Rights Reserved.) 61.2 642 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (100 Hamilton A) 54 631 B
-0.58 0.09 (venue, Palo Alto California 94301 U.S.A.) 116.52 631 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.62 0.09 (This pr) 54 614 B
-0.62 0.09 (oduct and r) 82.25 614 B
-0.62 0.09 (elated documentation ar) 127.91 614 B
-0.62 0.09 (e pr) 225.79 614 B
-0.62 0.09 (otected by copyright and distributed under licenses r) 240.89 614 B
-0.62 0.09 (estricting its use, copying,) 452.22 614 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (distribution, and decompilation. No part of this pr) 54 603 B
-0.58 0.09 (oduct or r) 254.76 603 B
-0.58 0.09 (elated documentation may be r) 293.62 603 B
-0.58 0.09 (epr) 417.67 603 B
-0.58 0.09 (oduced in any form by any) 431.05 603 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (means without prior written authorization of FirstPerson and its licensors, if any) 54 592 B
-0.58 0.09 (.) 374.32 592 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (Thir) 54 575 B
-0.58 0.09 (d-party font softwar) 71.13 575 B
-0.58 0.09 (e in this pr) 152.3 575 B
-0.58 0.09 (oduct is pr) 193.95 575 B
-0.58 0.09 (otected by copyright and licensed fr) 236.27 575 B
-0.58 0.09 (om Sun\325s Font Suppliers.) 379.43 575 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.61 0.09 (RESTRICTED RIGHTS LEGEND: Use, duplication, or disclosur) 54 558 B
-0.61 0.09 (e by the United States Government is subject to the r) 307.68 558 B
-0.61 0.09 (estrictions) 514.53 558 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (set forth in DF) 54 547 B
-0.58 0.09 (ARS 252.227-7013 \050c\051\0501\051\050ii\051 and F) 110.2 547 B
-0.58 0.09 (AR 52.227-19.) 239.11 547 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (The pr) 54 530 B
-0.58 0.09 (oduct described in this manual may be pr) 80.07 530 B
-0.58 0.09 (otected by one or mor) 244.91 530 B
-0.58 0.09 (e U.S. patents, for) 331.53 530 B
-0.58 0.09 (eign patents, or pending applications.) 401.47 530 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0.09 (TRADEMARKS) 54 513 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (FirstPerson, the FirstPerson logo, the FirstPerson agent, Sun, Sun Micr) 54 502 B
-0.58 0.09 (osystems, Sun Micr) 333.67 502 B
-0.58 0.09 (osystems Computer Corporation,) 411.34 502 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (the Sun logo, the SMCC logo,) 54 491 B
0 1 1 0 1 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (ar) 172.36 491 B
-0.58 0.09 (e trademarks or r) 180.43 491 B
-0.58 0.09 (egister) 248.75 491 B
-0.58 0.09 (ed trademarks of Sun Micr) 275.77 491 B
-0.58 0.09 (osystems, Inc. UNIX and OPEN LOOK ar) 381.93 491 B
-0.58 0.09 (e) 546.8 491 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (r) 54 480 B
-0.58 0.09 (egister) 57.48 480 B
-0.58 0.09 (ed trademarks of UNIX System Laboratories, Inc., a subsidiary of Novell, Inc.. All other pr) 84.5 480 B
-0.58 0.09 (oduct names mentioned) 442.98 480 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (her) 54 469 B
-0.58 0.09 (ein ar) 67.21 469 B
-0.58 0.09 (e the trademarks of their r) 89.48 469 B
-0.58 0.09 (espective owners.) 192.61 469 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (All SP) 54 452 B
-0.58 0.09 (ARC trademarks, including the SCD Compliant Logo, ar) 77.78 452 B
-0.58 0.09 (e trademarks or r) 303.23 452 B
-0.58 0.09 (egister) 371.54 452 B
-0.58 0.09 (ed trademarks of SP) 398.56 452 B
-0.58 0.09 (ARC International,) 477.94 452 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (Inc. SP) 54 441 B
-0.58 0.09 (ARCstation, SP) 80.14 441 B
-0.58 0.09 (ARCserver) 141 441 B
-0.58 0.09 (, SP) 185.17 441 B
-0.58 0.09 (ARCengine, SP) 198.78 441 B
-0.58 0.09 (ARCworks, and SP) 259.31 441 B
-0.58 0.09 (ARCompiler ar) 335.09 441 B
-0.58 0.09 (e licensed exclusively to Sun) 396.59 441 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (Micr) 54 430 B
-0.58 0.09 (osystems, Inc. Pr) 72.88 430 B
-0.58 0.09 (oducts bearing SP) 139.9 430 B
-0.58 0.09 (ARC trademarks ar) 210.88 430 B
-0.58 0.09 (e based upon an ar) 288.64 430 B
-0.58 0.09 (chitectur) 362.96 430 B
-0.58 0.09 (e developed by Sun Micr) 398.61 430 B
-0.58 0.09 (osystems, Inc.) 497.51 430 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.64 0.09 (The OPEN LOOK\250 and Sun\252 Graphical User Interfaces wer) 54 413 B
-0.64 0.09 (e developed by Sun Micr) 296.46 413 B
-0.64 0.09 (osystems, Inc. for its users and licensees.) 395.14 413 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (Sun acknowledges the pioneering ef) 54 402 B
-0.58 0.09 (forts of Xer) 198.67 402 B
-0.58 0.09 (ox in r) 242.92 402 B
-0.58 0.09 (esear) 267.68 402 B
-0.58 0.09 (ching and developing the concept of visual or graphical user) 288.46 402 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (interfaces for the computer industry) 54 391 B
-0.58 0.09 (. Sun holds a non-exclusive license fr) 197.71 391 B
-0.58 0.09 (om Xer) 343.86 391 B
-0.58 0.09 (ox to the Xer) 372.63 391 B
-0.58 0.09 (ox Graphical User Interface,) 422.39 391 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.6 0.09 (which license also covers Sun\325s licensees who implement OPEN LOOK GUIs and otherwise comply with Sun\325s written license) 54 380 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0.09 (agr) 54 369 S
0.09 (eements.) 67.17 369 S
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.58 0.09 (X W) 54 352 B
-0.58 0.09 (indow System is a trademark and pr) 70.44 352 B
-0.58 0.09 (oduct of the Massachusetts Institute of T) 214.78 352 B
-0.58 0.09 (echnology) 375.09 352 B
-0.58 0.09 (.) 416.14 352 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0.47 0.09 (THIS PUBLICA) 54 335 B
0.47 0.09 (TION IS PROVIDED \322AS IS\323 WITHOUT W) 117.75 335 B
0.47 0.09 (ARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,) 296.74 335 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0.47 0.09 (INCLUDING, BUT NOT LIMITED T) 54 324 B
0.47 0.09 (O, THE IMPLIED W) 204.88 324 B
0.47 0.09 (ARRANTIES OF MERCHANT) 288.46 324 B
0.47 0.09 (ABILITY) 413.37 324 B
0.47 0.09 (, FITNESS FOR A) 448.58 324 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0.47 0.09 (P) 54 313 B
0.47 0.09 (AR) 58.7 313 B
0.47 0.09 (TICULAR PURPOSE, OR NON-INFRINGEMENT) 71.56 313 B
0.47 0.09 (.) 275.7 313 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
-0.4 0.09 (THIS PUBLICA) 54 296 B
-0.4 0.09 (TION COULD INCLUDE TECHNICAL INACCURACIES OR TYPOGRAPHICAL ERRORS. CHANGES ARE) 116.88 296 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0.47 0.09 (PERIODICALL) 54 285 B
0.47 0.09 (Y ADDED T) 115.6 285 B
0.47 0.09 (O THE INFORMA) 166.6 285 B
0.47 0.09 (TION HEREIN; THESE CHANGES WILL BE INCORPORA) 242.23 285 B
0.47 0.09 (TED IN NEW) 485.9 285 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0.47 0.09 (EDITIONS OF THE PUBLICA) 54 274 B
0.47 0.09 (TION. FIRSTPERSON, INC. AND/OR SUN MICROSYSTEMS, INC. MA) 177.32 274 B
0.47 0.09 (Y MAKE) 474.47 274 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0.47 0.09 (IMPROVEMENTS AND/OR CHANGES IN THE PRODUCT\050S\051 AND/OR THE PROGRAM\050S\051 DESCRIBED IN THIS) 54 263 B
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0.47 0.09 (PUBLICA) 54 252 B
0.47 0.09 (TION A) 93.82 252 B
0.47 0.09 (T ANY TIME.) 126.51 252 B
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 37
%%Page: "1" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0 0.3 0.94 0 1 0.7 0.06]
[ 0.56 0.56 0 0 0.44 0.44 1]
[ 0.69 0.34 0 0 0.31 0.66 1]
[ 0.65 0 1 0 0.35 1 0]
[ 0.73 0.08 1 0 0.27 0.92 0]
[ 0.65 0.65 0.65 0 0.35 0.35 0.35]
[ 0 0.69 1 0 1 0.31 0]
[ 0.47 0.47 0.47 0 0.53 0.53 0.53]
[ 0.56 0.56 0.56 0 0.44 0.44 0.44]
[ 0.27 0.33 0.33 0 0.73 0.67 0.67]
[ 0 0.65 0.87 0 1 0.35 0.13]
 18 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
198 153 297 184 R
7 X
0 0 0 1 0 0 0 K
V
0 7 Q
0 X
(FirstPerson, Inc.) 198 179.33 T
(100 Hamilton A) 198 171.33 T
(venue) 246.56 171.33 T
(Palo Alto, CA 94301) 198 163.33 T
(U.S.A.) 198 155.33 T
549 99 576 117 R
7 X
V
0.3 H
0 Z
N
54 574.63 558 641.38 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 72 612 720 C
2 20 Q
0 X
0 0 0 1 0 0 0 K
(Oak) 198 561.29 T
(Language) 236.32 561.29 T
(Speci\336cation) 320.22 561.29 T
FMENDPAGE
%%EndPage: "1" 38
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Descend
%%Pages: 38
%%DocumentFonts: Palatino-Roman
%%+ Palatino-Bold
%%+ Palatino-Italic
%%+ Times-Roman
%%+ Times-Bold
%%+ Courier
%%+ Times-BoldItalic
%%+ Times-Italic
%%+ Courier-Oblique
%%+ Symbol
%%EOF
